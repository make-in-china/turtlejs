{"version":3,"names":[],"mappings":"","sources":["js/turtle.js"],"sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar $t;\n/// <reference path=\"global.ts\" />\nvar $Event = (function () {\n    function $Event() {\n        this.eventsCol = {};\n    }\n    $Event.prototype.on = function (name, fn) {\n        var lst;\n        if (this.eventsCol.hasOwnProperty(name)) {\n            lst = this.eventsCol[name];\n        }\n        else {\n            lst = [];\n            this.eventsCol[name] = lst;\n        }\n        lst.push(fn);\n    };\n    $Event.prototype.off = function (name, fn) {\n        var lst;\n        if (this.eventsCol.hasOwnProperty(name)) {\n            lst = this.eventsCol[name];\n            lst.forEach(function (item, index, array) {\n                if (item == fn) {\n                    lst.splice(index);\n                }\n            });\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    $Event.prototype.emit = function (name, event) {\n        var lst;\n        if (this.eventsCol.hasOwnProperty(name)) {\n            lst = this.eventsCol[name];\n            for (var i = 0; i < lst.length; i++) {\n                lst[i](event);\n            }\n        }\n    };\n    $Event.prototype.events = function (name) {\n        if (this.eventsCol.hasOwnProperty(name)) {\n            return this.eventsCol[name];\n        }\n    };\n    return $Event;\n}());\nvar ReadyObject = (function () {\n    function ReadyObject() {\n        this._isReady = false;\n        this.readyFunctions = [];\n    }\n    ReadyObject.prototype.on = function (fn) {\n        if (!isFunction(fn)) {\n            return;\n        }\n        if (this._isReady) {\n            fn();\n        }\n        else {\n            this.readyFunctions.push(fn);\n        }\n    };\n    Object.defineProperty(ReadyObject.prototype, \"isReady\", {\n        get: function () {\n            return this._isReady;\n        },\n        set: function (v) {\n            this._isReady = v;\n            while (this.readyFunctions.length > 0) {\n                this.readyFunctions.shift()();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ReadyObject;\n}());\n/// <reference path=\"global.ts\" />\n/// <reference path=\"$Event.ts\"/>\nvar ArrayEx = (function (_super) {\n    __extends(ArrayEx, _super);\n    function ArrayEx() {\n        _super.apply(this, arguments);\n    }\n    ArrayEx.prototype.last = function () {\n        if (this.length > 0) {\n            return this[this.length - 1];\n        }\n    };\n    ArrayEx.prototype.clear = function () {\n        var l = this.length;\n        for (var i = 0; i < l; i++) {\n            this.pop();\n        }\n    };\n    return ArrayEx;\n}(Array));\nvar exec = eval, toStr = Object.prototype.toString, arrayPrototype = Array.prototype, Objectprototype = Object.prototype, slice = arrayPrototype.slice, push = arrayPrototype.push, splice = arrayPrototype.splice, getPrototypeOf = Object.getPrototypeOf, replace = String.prototype.replace, persentRE = /^\\s*([\\d.]+)%\\s*$/, camelCaseRE = /-(\\w)/g, camelizeRE = /-+(.)?/g, deCamelizeRE = /[A-Z]/g, classSplitRE = /\\s+/g, addStyleRE = /;\\s*$/, addClassNameRE = /\\s+$/, rte = new $Event;\nNode.prototype.toDOM = Node.prototype.valueOf = function () { return this; };\nvar vNodesToDOM = function (nodes) { return nodes; };\n/**\n * 压缩js后保留此函数用于console.log;\n */\nvar log = Function('s', 'console.log(s)');\n/**\n * 压缩js后保留此函数用于debugger;\n */\nvar bp = Function('debugger');\nfunction extend(elem, elemEx) {\n    for (var e in elemEx) {\n        elem[e] = elemEx[e];\n    }\n    return elem;\n}\nfunction merge(elem, elemEx) {\n    for (var e in elemEx) {\n        if (!elem.hasOwnProperty(e)) {\n            elem[e] = elemEx[e];\n        }\n    }\n    return elem;\n}\nfunction takeAttr(node, attrName, defaultValue) {\n    if (!node.hasAttribute(attrName)) {\n        return defaultValue;\n    }\n    else {\n        var s = node.getAttribute(attrName);\n        node.removeAttribute(attrName);\n        return s;\n    }\n}\nfunction getAttr(node, attrName, defaultValue) {\n    if (!node.hasAttribute(attrName)) {\n        return defaultValue;\n    }\n    else {\n        return node.getAttribute(attrName);\n    }\n}\nfunction isRegExp(a) {\n    return \"[object RegExp]\" === toStr.call(a);\n}\nfunction isDate(a) {\n    return \"[object Date]\" === toStr.call(a);\n}\nfunction isNumber(a) {\n    return \"[object Number]\" === toStr.call(a);\n}\nfunction isString(a) {\n    return \"[object String]\" === toStr.call(a);\n}\nfunction isFunction(a) {\n    return \"[object Function]\" === toStr.call(a);\n}\nfunction isObject(a) {\n    var type = typeof a;\n    return type === 'function' || type === 'object' && !!a;\n}\nfunction isFinite(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n}\nfunction isUndefined(a) {\n    return a === void 0;\n}\nvar isArray = Array.isArray || function (a) {\n    return \"[object Array]\" === toStr.call(a);\n};\nfunction isPersent(s) {\n    return persentRE.test(s);\n}\nfunction persentToFloat(s) {\n    var v = persentRE.exec(s);\n    if (v) {\n        return parseInt(v[1]) / 100;\n    }\n}\nfunction isArrayLike(a) { return typeof a.length == 'number'; }\nfunction _catch(e, fn) {\n    if (fn) {\n        fn(e);\n    }\n    else {\n        rte.emit(\"error\", e);\n    }\n}\nfunction throwError(err) {\n    try {\n        throw new Error('turtle:\\n' + err);\n    }\n    catch (e) {\n        _catch(e);\n    }\n}\nfunction camelize(str) {\n    return str.replace(camelizeRE, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n    });\n}\nfunction decamelize(str) {\n    return str.replace(deCamelizeRE, function (match) {\n        return '-' + match.toLowerCase();\n    });\n}\nvar HashObject = (function () {\n    function HashObject() {\n    }\n    HashObject.prototype.clean = function () {\n        for (var i in this) {\n            delete this[i];\n        }\n    };\n    return HashObject;\n}());\nvar KeyArrayObject = (function (_super) {\n    __extends(KeyArrayObject, _super);\n    function KeyArrayObject() {\n        _super.apply(this, arguments);\n    }\n    KeyArrayObject.prototype.push = function (key, value) {\n        if (isArray(key)) {\n            for (var i = 0; i < key.length; i++) {\n                if (!this.hasOwnProperty(key[i])) {\n                    this[key[i]] = new ArrayEx();\n                }\n                this[key[i]].push(value);\n            }\n        }\n        else {\n            if (!this.hasOwnProperty(key)) {\n                this[key] = new ArrayEx();\n            }\n            this[key].push(value);\n        }\n    };\n    KeyArrayObject.prototype.getKeyArray = function () {\n        var arr = new ArrayEx();\n        for (var i in this) {\n            if (!this.hasOwnProperty(i)) {\n                arr.push(this[i]);\n            }\n        }\n        return arr;\n    };\n    KeyArrayObject.prototype.pop = function (key) {\n        var keyObject = this[key];\n        if (keyObject) {\n            return keyObject.pop();\n        }\n    };\n    return KeyArrayObject;\n}(HashObject));\nfunction newKeyArrayObject(type) {\n    return create(type, KeyArrayObject);\n}\nfunction newHashObject(type) {\n    return create(type, HashObject);\n}\nfunction create(type, tsClass) {\n    var s = 'let ' + type + '=function(){};';\n    if (isObject((tsClass).prototype)) {\n        s += type + '.prototype=proto;';\n    }\n    s += 'return new ' + type + '();';\n    return Function('proto', s)(tsClass.prototype);\n}\nvar newArrayObject = (function () {\n    return function (type) {\n        return create(type, ArrayEx);\n    };\n}());\nfunction NullValueHash(s) {\n    var arr = s.split(',');\n    for (var i in arr) {\n        this[arr[i]] = null;\n    }\n}\nfunction parseBool(v) {\n    if (typeof v == 'string') {\n        v = v.replace(/[\\s]/g, '').toLowerCase();\n        if (v && (v == 'false' || v == '0' || v == 'null' || v == 'undefined')) {\n            v = false;\n        }\n        else if (v) {\n            v = true;\n        }\n    }\n    return !!v;\n}\nfunction addStyle(elem, style) {\n    if (!style) {\n        return;\n    }\n    var oldStyle = elem.getAttribute('style');\n    if (oldStyle) {\n        if (addStyleRE.test(oldStyle)) {\n            style = oldStyle + style;\n        }\n        else {\n            style = oldStyle + ';' + style;\n        }\n    }\n    elem.setAttribute('style', style);\n}\nfunction addClassName(elem, className) {\n    if (!className) {\n        return;\n    }\n    var oldClass = elem.getAttribute('class');\n    if (oldClass) {\n        if (addClassNameRE.test(oldClass)) {\n            className = oldClass + className;\n        }\n        else {\n            className = oldClass + ' ' + className;\n        }\n    }\n    elem.setAttribute('class', className);\n}\nfunction addClass(elem) {\n    var arg = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        arg[_i - 1] = arguments[_i];\n    }\n    addClasses(elem, arg);\n}\nfunction addClasses(elem, clses) {\n    var lst;\n    if (!elem)\n        return;\n    lst = elem.classList;\n    for (var i = 0; i < clses.length; i++) {\n        if (!lst.contains(clses[i]))\n            lst.add(clses[i]);\n    }\n}\nfunction removeClass(elem, cls) {\n    var lst;\n    if (!elem) {\n        return;\n    }\n    lst = elem.classList;\n    if (lst.contains(cls)) {\n        lst.remove(cls);\n    }\n}\nfunction removeClasses(elem, clses) {\n    var lst;\n    if (!elem)\n        return;\n    lst = elem.classList;\n    for (var i = 0; i < clses.length; i++) {\n        if (lst.contains(clses[i]))\n            lst.remove(clses[i]);\n    }\n}\nfunction replaceClass(sel, a, b) { if (sel && a && b)\n    sel.className = sel.className.replace(a, b); }\nfunction toggleClass(sel, a, t, f) {\n    if (sel && a)\n        if (sel.className.indexOf(a) >= 0) {\n            sel.className = sel.className.replace(a, \"\");\n            if (f)\n                f();\n        }\n        else {\n            sel.className += \" \" + a;\n            if (t)\n                t();\n        }\n}\nfunction removeItem(arr, obj) {\n    var index = arr.indexOf(obj);\n    if (index != -1) {\n        arr.splice(index, 1);\n    }\n}\nfunction trim(s) { return s.replace(/^\\s*|\\s*$/g, \"\"); }\nfunction HTMLTrim(s) { return s.replace(/^[\\s\\r\\n]*|[\\s\\r\\n]*$/g, \"\"); }\nfunction trimLine(s) { return s.replace(/^\\s*/g, \"\").replace(/\\s*$/g, \"\").replace(/\\s*[\\r\\n]\\s*/g, \"\"); }\nvar dateFormat = (function () {\n    return function (format, d) {\n        'use strict';\n        var o = {\n            \"M+\": d.getMonth() + 1,\n            \"d+\": d.getDate(),\n            \"h+\": d.getHours(),\n            \"m+\": d.getMinutes(),\n            \"s+\": d.getSeconds(),\n            \"q+\": Math.floor((d.getMonth() + 3) / 3),\n            \"S\": d.getMilliseconds() //millisecond\n        };\n        if (/(y+)/.test(format)) {\n            format = format.replace(RegExp.$1, (d.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n        }\n        for (var k in o) {\n            if (new RegExp(\"(\" + k + \")\").test(format)) {\n                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n            }\n        }\n        return format;\n    };\n})();\nfunction camelCase(s) {\n    return s.replace(camelCaseRE, function (s, s1) {\n        return s1.toUpperCase();\n    });\n}\nfunction insertNodesBefore(node, nodes) {\n    var parent = node.parentNode;\n    if (parent == null) {\n        return;\n    }\n    for (var i = 0; i < nodes.length; i++) {\n        parent.insertBefore2(nodes[i], node);\n    }\n}\nfunction removeNode(node) {\n    var p = node.parentNode;\n    if (p) {\n        return p.removeChild(node);\n    }\n    else {\n        return null;\n    }\n}\nfunction replaceNodeByNodes(node, nodes) {\n    insertNodesBefore(node, nodes);\n    removeNode(node);\n}\nfunction insertNode(node, childNode) {\n    var parent = node.parentNode;\n    if (parent == null)\n        return 0;\n    parent.insertBefore2(childNode, node);\n    return 0;\n}\nfunction deepClone(node) {\n    var n = node.cloneNode();\n    var ns = node.childNodes;\n    for (var i = 0; i < ns.length; i++) {\n        n.appendChild(deepClone(ns[i]));\n    }\n    return n;\n}\nfunction cloneBetween(node1, node2) {\n    var nodes = [];\n    var l1 = getNodeIndex2(node1);\n    var l2 = getNodeIndex2(node2);\n    var p1 = node1.parentNode;\n    for (var i = l1 + 1; i < l2; i++) {\n        nodes.push(deepClone(p1.childNodes[i]));\n    }\n    return nodes;\n}\nfunction removeBlockBetween(node1, node2) {\n    var p1 = node1.parentNode;\n    var l1 = getNodeIndex2(node1) + 1;\n    var l2 = getNodeIndex2(node2);\n    for (var i = l1; i < l2; i++) {\n        p1.removeChild(p1.childNodes[l1]);\n    }\n}\nfunction replaceNodeByNode(node, node2) {\n    var parent = node.parentNode;\n    if (parent == null) {\n        return;\n    }\n    insertNode(node, node2);\n    parent.removeChild(node);\n}\nfunction appendNodes(nodes, parent) {\n    var c = slice.call(nodes);\n    for (var i = 0; i < c.length; i++) {\n        parent.appendChild(c[i]);\n    }\n}\nfunction takeChildNodes(node) {\n    var c = node.childNodes;\n    var length = c.length;\n    var ret = [];\n    for (var i = length; i > 0; i--) {\n        ret.push(node.removeChild(c[0]));\n    }\n    return ret;\n}\nfunction takeOutChildNodes(node) {\n    var parent = node.parentNode;\n    if (parent == null) {\n        return 0;\n    }\n    var c = node.childNodes;\n    var i = 0;\n    for (var j = c.length - 1; j > -1; j--) {\n        parent.insertBefore2(node.removeChild(c[0]), node);\n    }\n    parent.removeChild(node);\n    return i;\n}\nfunction takeBlockBetween(node1, node2) {\n    var p1 = node1.parentNode;\n    var ns1 = p1.childNodes;\n    var l1 = getNodeIndex2(node1) + 1;\n    var l2 = getNodeIndex2(node2);\n    var ns = [];\n    for (var i = l1; i < l2; i++) {\n        ns.push(p1.removeChild(ns1[l1]));\n    }\n    return ns;\n}\nfunction getNodesLength(node) {\n    if (node.parentNode) {\n        return node.parentNode.children.length;\n    }\n    var index = getNodeIndex(node) - 1;\n    node = node.nextElementSibling;\n    while (node != null) {\n        node = node.nextElementSibling;\n        index++;\n    }\n    return index;\n}\nfunction getNodeIndex(node) {\n    var index = 0;\n    node = node.previousElementSibling;\n    while (node != null) {\n        node = node.previousElementSibling;\n        index++;\n    }\n    return index;\n}\nfunction getNodesLength2(node) {\n    if (node.parentNode) {\n        return node.parentNode.childNodes.length;\n    }\n    var index = getNodeIndex2(node) - 1;\n    node = node.nextSibling;\n    while (node != null) {\n        node = node.nextSibling;\n        index++;\n    }\n    return index;\n}\nfunction getNodeIndex2(node) {\n    var index = 0;\n    node = node.previousSibling;\n    while (node != null) {\n        node = node.previousSibling;\n        index++;\n    }\n    return index;\n}\nfunction splitByOnce(s, split) {\n    var index = s.indexOf(split), arr = [];\n    if (index != -1) {\n        arr.push(s.substring(0, index));\n        arr.push(s.substring(index + split.length, s.length));\n    }\n    else {\n        arr.push(s);\n    }\n    return arr;\n}\n/**\n * 遍历树\n * @param {T[]|IArray} array 数组或类数组\n * @param {string} propertyName 数组元素包含的属性名\n * @param {(node:T,step?:ITreeEachStep)=>eTreeEach|undefined} fn 回调函数\n * @param {number} beginIndex 遍历起始位置\n */\nfunction treeEach(array, propertyName, fn, beginIndex) {\n    if (beginIndex === void 0) { beginIndex = 0; }\n    if (!isArrayLike(array)) {\n        return;\n    }\n    var arr = array, i = beginIndex, stack = [], obj, obj2, state, step = { next: 1 };\n    while (true) {\n        if (i < arr.length) {\n            obj = arr[i];\n            step.next = 1;\n            state = fn(obj, step);\n            if (state == undefined) {\n                state = 0;\n            }\n            else if (state == 1 /* c_stopEach */) {\n                break;\n            }\n            obj2 = arr[i];\n            if (obj2 && obj2 != obj && !(8 /* c_noRepeat */ & state)) {\n                state = state | 2 /* c_repeat */;\n            }\n            if (obj2 && obj2[propertyName] && obj2[propertyName].length > 0 && !(state & 4 /* c_noIn */) && propertyName) {\n                stack.push(arr);\n                stack.push(i + (state & 2 /* c_repeat */ ? 0 : step.next));\n                i = 0;\n                arr = obj2[propertyName];\n            }\n            else {\n                i += (state & 2 /* c_repeat */ ? 0 : step.next);\n            }\n        }\n        else if (stack.length > 0) {\n            i = stack.pop();\n            arr = stack.pop();\n        }\n        else {\n            break;\n        }\n    }\n    return { stack: stack, state: state, array: arr, index: i };\n}\n/**浏览器兼容 */\nvar ClassList = (function () {\n    function ClassList(__elem__) {\n        this.__elem__ = __elem__;\n    }\n    ClassList.prototype.add = function (value) {\n        var classes = this.__elem__.className.split(classSplitRE);\n        var index = classes.indexOf(value);\n        if (!~index) {\n            classes.push(value);\n            this.__elem__.className = classes.join(' ');\n        }\n    };\n    ClassList.prototype.remove = function (value) {\n        var classes = this.__elem__.className.split(classSplitRE);\n        var index = classes.indexOf(value);\n        if (~index) {\n            classes.splice(index, 1);\n            this.__elem__.className = classes.join(' ');\n        }\n    };\n    ClassList.prototype.toggle = function (value) {\n        var classes = this.__elem__.className.split(classSplitRE);\n        var index = classes.indexOf(value);\n        if (~index) {\n            classes.splice(index, 1);\n        }\n        else {\n            classes.push(value);\n        }\n        this.__elem__.className = classes.join(' ');\n    };\n    ClassList.prototype.contains = function (value) {\n        return !!~this.__elem__.className.split(classSplitRE).indexOf(value);\n    };\n    ClassList.prototype.item = function (i) {\n        return this.__elem__.className.split(classSplitRE)[i] || null;\n    };\n    return ClassList;\n}());\nfunction defineClassList(object) {\n    Object.defineProperty(object, 'classList', {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            if (this.__classList__) {\n                return this.__classList__;\n            }\n            else {\n                Object.defineProperty(this, '__classList__', {\n                    writable: false,\n                    enumerable: false,\n                    configurable: false,\n                    value: new ClassList(this)\n                });\n                return this.__classList__;\n            }\n        }\n    });\n}\nvar isIE = !!window.ActiveXObject || \"ActiveXObject\" in window;\n(function () {\n    var insertBefore = Node.prototype.insertBefore;\n    if (isIE) {\n        Node.prototype.insertBefore2 = function (newNode, node) {\n            var reAppend = [];\n            var n;\n            switch (newNode.nodeType) {\n                case 3:\n                    if (newNode.data === \"\") {\n                        return;\n                    }\n                case 8:\n                    n = node.nextSibling;\n                    while (n !== null) {\n                        reAppend.push(this.removeChild(n));\n                        n = node.nextSibling;\n                    }\n                    reAppend.unshift(this.removeChild(node));\n                    this.appendChild(newNode);\n                    for (var i = 0; i < reAppend.length; i++) {\n                        this.appendChild(reAppend[i]);\n                    }\n                    break;\n                default:\n                    insertBefore.call(this, newNode, node);\n            }\n        };\n    }\n    else {\n        Node.prototype.insertBefore2 = insertBefore;\n    }\n})();\nvar withthis = 'with(this){return eval($$turtle$$)};' /*eval支持返回最后一个表达式的值*/, _execValueByScope = Function('$$turtle$$,v,node,outer,outerElement,props,part', withthis), _execByScope = Function('$$turtle$$,node,outer,outerElement,props,part', withthis), _execExpressionsByScope = Function('$$turtle$$,v,node', withthis);\nfunction execValueByScope(node, s, v, scope, outerChildNodes, outerElement, props, part) {\n    return _execValueByScope.call(getScopeBy(scope, node), s, v, node, outerChildNodes, outerElement, props, part);\n}\nvar execTemplateScript = (function () {\n    var replaceRE = /{%.+?%}/g;\n    return function (s, node, outerChildNodes, outerElement, props, part) {\n        s = s.replace(replaceRE, function (s) {\n            return execByScope(node, s.substring(2, s.length - 2), null, outerChildNodes, outerElement, props, part);\n        });\n        return s;\n    };\n}());\n/// <reference path=\"core.ts\"/>\n/// <reference path=\"Execute.ts\"/>\nfunction _getBindObject(scope, arrNames) {\n    var i, obj, length = arrNames.length;\n    ;\n    while (scope) {\n        obj = scope;\n        for (i = 0; i < length; i++) {\n            if (obj.hasOwnProperty(arrNames[i])) {\n                if (i < length - 1) {\n                    obj = obj[arrNames[i]];\n                    continue;\n                }\n                else {\n                    return obj;\n                }\n            }\n        }\n        scope = scope.__parent__;\n    }\n    obj = window[arrNames[0]];\n    if (obj) {\n        for (i = 1; i < length; i++) {\n            if (obj.hasOwnProperty(arrNames[i])) {\n                if (i < length - 1) {\n                    obj = obj[arrNames[i]];\n                    continue;\n                }\n                else {\n                    return obj;\n                }\n            }\n        }\n    }\n    return null;\n}\nfunction addBindInfo(obj, name, target, targetName, event) {\n    var bindInfoHash = obj.__bind__;\n    if (!bindInfoHash) {\n        bindInfoHash = [];\n        obj.__bind__ = bindInfoHash;\n    }\n    bindInfoHash.push({ name: name, target: target, targetName: targetName, event: event });\n}\nfunction removeBind(obj, name, targetName) {\n    if (!obj.__bind__) {\n        return false;\n    }\n    var bindInfoHash = obj.__bind__;\n    for (var i in bindInfoHash) {\n        if (bindInfoHash[i].name === name && bindInfoHash[i].targetName === targetName) {\n            if (bindInfoHash.length == 1) {\n                bindInfoHash.length = 0;\n                delete obj.__bind__;\n            }\n            else {\n                bindInfoHash.splice(i, 1);\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction onPropertyChange(obj, name, fnOnSet) {\n    var desc = Object.getOwnPropertyDescriptor(obj, name);\n    if (!desc)\n        return;\n    if (desc.configurable === false)\n        throwError('绑定失败：原属性' + name + '替换失败');\n    if (desc.writable === false)\n        throwError('绑定失败：原属性' + name + '不可写');\n    delete obj[name];\n    var newProperty = { enumerable: desc.enumerable, configurable: true };\n    var value;\n    if (desc.hasOwnProperty('value')) {\n        var _value_1 = desc.value;\n        if (isFunction(_value_1)) {\n            newProperty.get = function () {\n                return _value_1.call(this, value);\n            };\n            newProperty.set = function (newValue) {\n                value = newValue;\n                _value_1.call(this, value);\n                fnOnSet.call(obj, name);\n            };\n        }\n        else {\n            newProperty.get = function () {\n                return _value_1;\n            };\n            newProperty.set = function (newValue) {\n                _value_1 = newValue;\n                fnOnSet.call(obj, name);\n            };\n        }\n    }\n    else {\n        if (desc.hasOwnProperty('get')) {\n            var _get_1 = desc.get;\n            newProperty.get = function () {\n                return _get_1.call(this);\n            };\n        }\n        if (desc.hasOwnProperty('set')) {\n            var _set_1 = desc.set;\n            newProperty.set = function (newValue) {\n                _set_1.call(this, newValue);\n                fnOnSet.call(obj, name);\n            };\n        }\n    }\n    Object.defineProperty(obj, name, newProperty);\n    desc = null;\n}\nfunction objectPropertyChange(obj, name, fnOnSet) {\n    if (obj.hasOwnProperty(name)) {\n        onPropertyChange(obj, name, fnOnSet);\n    }\n}\nfunction bindPropertyByName(obj, name, obj2, name2) {\n    var t = function (name) {\n        if (!t.isBinding) {\n            t.isBinding = true;\n            for (var i = 0; i < t.list.length; i++) {\n                var obj_1 = t.list[i];\n                if (obj_1 !== this) {\n                    var o = obj_1.__bind__;\n                    for (var j in o) {\n                        if (o[j].targetName === name) {\n                            if (obj_1[o[j].name] != this[name]) {\n                                obj_1[o[j].name] = this[name];\n                            }\n                        }\n                    }\n                }\n            }\n            t.isBinding = false;\n        }\n    };\n    t.isBinding = false;\n    t.removeObject = function (obj) {\n        removeItem(t.list, obj);\n    };\n    t.list = [obj, obj2];\n    addBindInfo(obj, name, obj2, name2, t);\n    addBindInfo(obj2, name2, obj, name, t);\n    return t;\n}\nvar bindProperty = (function () {\n    function getBindInfo(obj, name, targetName) {\n        if (!obj.__bind__)\n            return;\n        var bindInfoHash = obj.__bind__;\n        for (var i in bindInfoHash) {\n            if (bindInfoHash[i].name === name && bindInfoHash[i].targetName === targetName) {\n                return bindInfoHash[i];\n            }\n        }\n    }\n    return function (obj, name, obj2, name2, type) {\n        var bindInfo1 = getBindInfo(obj, name, name2);\n        var bindInfo2 = getBindInfo(obj2, name2, name);\n        if (bindInfo1 && bindInfo2 && bindInfo1.event !== bindInfo2.event) {\n            throwError(\"不能混合不同的绑定链\");\n            return;\n        }\n        else if (bindInfo1) {\n            var e = bindInfo1.event;\n            addBindInfo(obj2, name2, obj, name, e);\n            e.list.push(obj2);\n            if (type != 2) {\n                onPropertyChange(obj2, name2, e);\n                e.isBinding = true;\n                obj2[name2] = obj[name];\n                e.isBinding = false;\n            }\n        }\n        else if (bindInfo2) {\n            var e = bindInfo2.event;\n            addBindInfo(obj, name, obj2, name2, e);\n            e.list.push(obj);\n            //if(type!=2){\n            onPropertyChange(obj, name, e);\n            e.isBinding = true;\n            obj[name] = obj2[name2];\n            e.isBinding = false;\n        }\n        else {\n            var fn = bindPropertyByName(obj, name, obj2, name2);\n            onPropertyChange(obj, name, fn);\n            if (type != 2) {\n                onPropertyChange(obj2, name2, fn);\n                fn.isBinding = true;\n                obj2[name2] = obj[name];\n                fn.isBinding = false;\n            }\n        }\n    };\n}());\nfunction bindElementProperty(obj, name, obj2, name2) {\n    bindProperty(obj, name, obj2, name2, 2);\n}\n/*绑定属性与描述*/\nfunction bindNodeProperty(node, proName, condition) {\n    var cdtn = splitByOnce(condition, \"|\"), name, scope, obj, obj2 = node, bindVar = cdtn[0], arrBindVar, exp, name2 = camelCase(proName);\n    if (name2.indexOf(\".\") != -1) {\n        name2 = name2.split(\".\");\n        for (var i = 0; i < name2.length - 1; i++) {\n            obj2 = obj2[name2[i]];\n            if (!obj2)\n                return;\n        }\n        name2 = name2[name2.length - 1];\n    }\n    if (bindVar.indexOf(\".\") != -1) {\n        arrBindVar = bindVar.split(\".\");\n    }\n    else {\n        arrBindVar = [bindVar];\n    }\n    name = bindVar[bindVar.length - 1];\n    scope = $t.domScope.get(node);\n    obj = _getBindObject(scope, arrBindVar);\n    if (obj === null) {\n        throwError('不能获取绑定属性:' + cdtn[0]);\n        return;\n    }\n    if (cdtn.length == 2) {\n        exp = function (v) {\n            obj2[name2] = _execExpressionsByScope(cdtn[1], v, node);\n        };\n        exp.__me__ = exp;\n        bindProperty(obj, name, exp, '__me__');\n    }\n    else {\n        bindElementProperty(obj, name, obj2, name2);\n        obj2[name2] = obj[name];\n    }\n}\n/*\n    * 绑定标签属性\n    */\nfunction bindElementPropertyByName(node, elementValueName, condition) {\n    var cdtn = splitByOnce(condition, \"|\"), name = cdtn[0], arrName, scope, exp, obj;\n    if (!name)\n        return;\n    scope = $t.domScope.get(node);\n    if (name.indexOf(\".\") != -1) {\n        arrName = name.split(\".\");\n        obj = _getBindObject(scope, arrName);\n        name = arrName[arrName.length - 1];\n    }\n    else {\n        obj = _getBindObject(scope, [name]);\n    }\n    if (obj === null) {\n        throwError('不能获取绑定属性:' + cdtn[0]);\n        return;\n    }\n    if (cdtn.length == 2) {\n        exp = function (v) {\n            _execExpressionsByScope(cdtn[1], v, node);\n        };\n        exp.__me__ = exp;\n        bindProperty(obj, name, exp, \"__me__\");\n    }\n    else {\n        if (!node.__bind__) {\n            node[elementValueName] = obj[name];\n        }\n        bindProperty(obj, name, node, elementValueName);\n    }\n}\nfunction bindPropertyByOrder(node, condition) {\n    var cdtn = splitByOnce(condition, '|');\n    if (cdtn.length < 2)\n        return;\n    var name, scope, obj, bindVar = cdtn[0], arrBindVar, name2, scope2, obj2, bindVar2 = cdtn[1], arrBindVar2;\n    if (bindVar.indexOf(\".\") != -1) {\n        arrBindVar = bindVar.split(\".\");\n    }\n    else {\n        arrBindVar = [bindVar];\n    }\n    name = bindVar[bindVar.length - 1];\n    scope = $t.domScope.get(node);\n    obj = _getBindObject(scope, arrBindVar);\n    if (bindVar2.indexOf(\".\") != -1) {\n        arrBindVar2 = bindVar2.split(\".\");\n    }\n    else {\n        arrBindVar2 = [bindVar2];\n    }\n    name2 = bindVar2[bindVar2.length - 1];\n    scope2 = $t.domScope.get(node);\n    obj2 = _getBindObject(scope2, arrBindVar2);\n    bindProperty(obj, name, obj2, name2);\n    obj2[name2] = obj[name];\n}\nfunction bindExpressionsByOrder(node, condition) {\n    var cdtn = splitByOnce(condition, '|');\n    if (cdtn.length < 2)\n        cdtn.push('v');\n    var name, scope, obj, bindVar = cdtn[0], arrBindVar, exp, textNode = $node(' ', 3);\n    if (bindVar.indexOf(\".\") != -1) {\n        arrBindVar = bindVar.split(\".\");\n    }\n    else {\n        arrBindVar = [bindVar];\n    }\n    name = bindVar[bindVar.length - 1];\n    scope = $t.domScope.get(node);\n    obj = _getBindObject(scope, arrBindVar);\n    if (obj === null) {\n        throwError('不能获取绑定属性:' + cdtn[0]);\n        return;\n    }\n    exp = function (v) {\n        try {\n            return _execExpressionsByScope.call(scope, cdtn[1], v, node);\n        }\n        catch (e) {\n            _catch(e);\n        }\n    };\n    exp.__me__ = exp;\n    bindProperty(obj, name, exp, '__me__');\n    replaceNodeByNode(node, textNode);\n    bindElementProperty(exp, '__me__', textNode, 'data');\n    textNode['data'] = exp.__me__;\n}\n/// <reference path='../core.ts'/>\nvar NameItem = (function () {\n    function NameItem(name) {\n        this.name = name;\n    }\n    return NameItem;\n}());\nvar BasePath = (function () {\n    function BasePath() {\n        this.paths = {};\n    }\n    BasePath.prototype.push = function (v) {\n        if (isString(v)) {\n            this.parseUIPath(v);\n        }\n        else if (isArray(v)) {\n            for (var i = 0; i < v.length; i++) {\n                if (isString(v[i])) {\n                    this.parseUIPath(v[i]);\n                }\n            }\n        }\n    };\n    BasePath.prototype.parseUIPath = function (s) {\n        try {\n            var o = exec('(' + s + ')');\n            if (isObject(o) && o.hasOwnProperty('name') && o.hasOwnProperty('path')) {\n                this.paths[o.name] = o;\n                this.push(o);\n            }\n        }\n        catch (e) {\n            _catch(e);\n        }\n    };\n    BasePath.prototype.getPathBySortPath = function (sortPath) {\n        return this.paths[sortPath].path;\n    };\n    BasePath.prototype.hasSortPath = function (sortPath) {\n        return this.paths.hasOwnProperty(sortPath);\n    };\n    BasePath.prototype.toString = function () {\n        var arr = [];\n        for (var i in this.paths) {\n            arr.push(\"{name:'\" + this.paths[i].name + \"',path:'\" + this.paths[i].path + \"'}\");\n        }\n        return arr.join(';');\n    };\n    return BasePath;\n}());\nvar TemplateConfig = (function () {\n    function TemplateConfig() {\n        this.XMP = {};\n        this.TEMPLATE = {};\n        this.TITLE = { getData: function (node) { return node.innerText; } };\n        this.STYLE = { xmp: undefined };\n        this.SCRIPT = { xmp: undefined };\n        this.TEXTAREA = { xmp: undefined, getData: function (node) { return node.defaultValue; } };\n    }\n    TemplateConfig.prototype.toString = function () {\n        var arr = [];\n        var desc;\n        for (var i in this) {\n            if (!this.hasOwnProperty(i)) {\n                continue;\n            }\n            desc = '<' + i.toLowerCase();\n            if (this[i].hasOwnProperty(\"xmp\")) {\n                desc += ' xmp';\n            }\n            desc += '>';\n            arr.push(desc);\n        }\n        return arr.join(\"\\n\");\n    };\n    Object.defineProperty(TemplateConfig.prototype, \"items\", {\n        get: function () {\n            var items = [];\n            for (var i in this) {\n                if (!this.hasOwnProperty(i)) {\n                    continue;\n                }\n                var item = new NameItem(i.toLowerCase());\n                extend(item, this[i]);\n                items.push(item);\n            }\n            return items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TemplateConfig.prototype.findByString = function (str) {\n        if (str.length === 0) {\n            return;\n        }\n        var ts = this.items;\n        var regExes = [];\n        for (var i = 0; i < ts.length; i++) {\n            var s = '(<' + ts[i].name;\n            if (ts[i].hasOwnProperty('xmp')) {\n                s += '[\\\\s\\\\S]*? +xmp';\n            }\n            s += \"([\\\\s\\\\S]*?)>([\\\\s\\\\S]*?)<\\\\/\" + ts[i].name + \">\";\n            s += ')';\n            regExes.push(s);\n        }\n        var re = new RegExp(regExes.join(\"|\"), \"g\"); //exec(`(/${regExes.join(\"|\")}/g)`);\n        return str.match(re);\n    };\n    return TemplateConfig;\n}());\nvar templateConfig = new TemplateConfig;\nvar baseUIPath = new BasePath;\n/// <reference path=\"../core.ts\"/>\n/// <reference path=\"../Execute.ts\"/>\n/// <reference path=\"../bind.ts\"/>\nvar orderRE = /^\\s?(if|while|for|switch|async|break|-|scope|content|elements|bind|!|let|=)(\\s|$)/g, orderCaseRE = /^\\s?(else if|else|case break|case|default|end)(\\s|$)/g, parseForOrderRE = /[a-zA-Z\\d] in .*/, parseForOrderRE2 = /^.*;.*;.*$/, SetParseError = function (msg) {\n    SetParseError.isError = true;\n    alert(msg);\n    return 1 /* c_stopEach */;\n}, orderStack = new ArrayEx;\nSetParseError.isError = false;\nfunction replaceCls() {\n    var arr = $t.replaceClassStore;\n    for (var i = 0; i < arr.length; i++) {\n        var cls = arr[i].getAttribute('cls');\n        arr[i].removeAttribute('cls');\n        if ($t.defineClassNames[cls]) {\n            arr[i].className += ' ' + $t.defineClassNames[cls].join(\" \");\n        }\n    }\n    arr.length = 0;\n}\nfunction getCommentStringInfo(s) {\n    var order = s.match(orderRE);\n    if (order) {\n        return { order: trim(order[0]), condition: s.substring(order[0].length, s.length) };\n    }\n    else {\n        var orderCase = s.match(orderCaseRE);\n        if (orderCase) {\n            return { orderCase: trim(orderCase[0]), condition: s.substring(orderCase[0].length, s.length) };\n        }\n    }\n}\nvar getCommentText = (function () {\n    if (Comment.prototype.hasOwnProperty(\"text\")) {\n        var commentDataRE_1 = /^<!--([\\s\\S]*?)-->$/;\n        var commentDataRE2_1 = /^<!([\\s\\S]*?)>$/;\n        var commentDataRE3_1 = /^!-?|-?&/;\n        return function (node) {\n            var s = node.text;\n            if (commentDataRE_1.test(s)) {\n                return s.substring(4, s.length - 3);\n            }\n            else if (commentDataRE2_1.test(s)) {\n                return s.substring(2, s.length - 1);\n            }\n            else {\n                return s.replace(commentDataRE3_1, '');\n            }\n        };\n    }\n    else {\n        return function (node) {\n            return node.data;\n        };\n    }\n}());\nfunction parseScopeOrder(info, node, outerChildNodes, outerElement, props, part) {\n    var condition = splitByOnce(info.condition, \"|\");\n    if (condition.length == 2) {\n        $t.domScope.create(node, condition[0]);\n        execScope(condition[1], node, outerChildNodes, outerElement, props, part);\n    }\n    else {\n        $t.domScope.create(node, condition[0]);\n    }\n    removeNode(node);\n}\nfunction parseCommentOrderNoScript(info, node, outerChildNodes, outerElement, props, part) {\n    /*不渲染，纯找结构*/\n    switch (info.order) {\n        case 'while':\n            return parseWhileOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'if':\n            return parseIfOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'for':\n            return parseForOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'switch':\n            return parseSwitchOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'async':\n            return parseAsyncOrder(info, node, outerChildNodes, outerElement, props, part);\n    }\n}\nfunction parseCommentOrderBlock(node, outerChildNodes, outerElement, props, part) {\n    var i = getNodeIndex2(node);\n    var isError = false;\n    var error = function (msg) {\n        isError = true;\n        alert(msg);\n        return 1 /* c_stopEach */;\n    };\n    return treeEach(node.parentNode.childNodes, 'childNodes', function (node, step) {\n        if (node.nodeType != 8)\n            return;\n        var info = getCommentStringInfo(getCommentText(node));\n        if (!info)\n            return;\n        if (info.order) {\n            var ret = parseCommentOrderNoScript(info, node, outerChildNodes, outerElement, props, part);\n            if (ret) {\n                step.next = ret.index - getNodeIndex2(node) + 1;\n            }\n            return 8 /* c_noRepeat */ & 4 /* c_noIn */;\n        }\n        if (info.orderCase == 'end') {\n            if (orderStack.length > 0) {\n                orderStack.pop().__endNode__ = node;\n                return 1 /* c_stopEach */;\n            }\n            else {\n                return error('语法错误：多余的end');\n            }\n        }\n        return 4 /* c_noIn */;\n    }, i + 1);\n}\nfunction addOrderToNode(node, info, outerChildNodes, outerElement, props, part, fnGetOrder) {\n    var order;\n    if (!node.order) {\n        order = fnGetOrder();\n        node.order = order;\n        order.name = info.order;\n        order.node = node;\n        order.endNode = null;\n        order.condition = info.condition;\n        orderStack.push(order);\n        order.parseCommentOrderBlockReturnValue = parseCommentOrderBlock(node, outerChildNodes, outerElement, props, part);\n    }\n    else {\n        order = node.order;\n    }\n    return order.parseCommentOrderBlockReturnValue;\n}\nfunction parseIfOrder(info, node, outerChildNodes, outerElement, props, part) {\n    return addOrderToNode(node, info, outerChildNodes, outerElement, props, part, function () {\n        var scope = $t.domScope.get(node);\n        return {\n            endHit: null,\n            hit: null,\n            hasElse: false,\n            run: function () {\n                var order = this;\n                order.hit = parseBool(execByScope(node, this.condition, scope, outerChildNodes, outerElement, props, part)) ? this.node : null;\n                treeEach(node.parentNode.childNodes, 'childNodes', function (node, step) {\n                    if (node.nodeType != 8)\n                        return;\n                    var info = getCommentStringInfo(getCommentText(node));\n                    if (!info)\n                        return;\n                    if (node.__order__) {\n                        step.next = getNodeIndex2(node.__order__.__endNode__) - getNodeIndex2(node);\n                        return;\n                    }\n                    switch (info.orderCase) {\n                        case 'else':\n                        case 'else if':\n                            if (!order.hasElse) {\n                                if (info.orderCase == 'else') {\n                                    order.hasElse = true;\n                                }\n                                if (!order.endHit) {\n                                    if (order.hit) {\n                                        order.endHit = node;\n                                    }\n                                    else {\n                                        if (info.orderCase == 'else' || parseBool(execByScope(node, this.condition, scope, outerChildNodes, outerElement, props, part))) {\n                                            order.hit = node;\n                                        }\n                                        else {\n                                            /*删除else if*/\n                                            removeNode(node);\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                return SetParseError('语法错误：else或else if不能出现在else后');\n                            }\n                            break;\n                    }\n                }, getNodeIndex2(node) + 1);\n                var p = this.node.parentNode;\n                if (!this.hit) {\n                    /*全部删除*/\n                    removeBlockBetween(this.node, this.endNode);\n                    p.removeChild(this.node);\n                    p.removeChild(this.endNode);\n                }\n                else {\n                    if (!this.endHit) {\n                        this.endHit = this.endNode;\n                    }\n                    /*保留hit到break之间的内容*/\n                    var ns = takeBlockBetween(this.hit, this.endHit);\n                    insertNodesBefore(this.node, ns);\n                    /*全部删除*/\n                    removeBlockBetween(this.node, this.endNode);\n                    p.removeChild(this.node);\n                    p.removeChild(this.endNode);\n                }\n            }\n        };\n    });\n}\nfunction parseBreakOrder(info, node, outerChildNodes, outerElement, props, part) {\n    /*删除后面节点,父节点后面节点,父父节点后面节点直至__break__*/\n    var _node = node.previousSibling;\n    if (!_node)\n        _node = node.parentNode;\n    removeNode(node);\n    var p = _node.parentNode;\n    while (_node.nodeName != '__BREAK__') {\n        var cs = p.childNodes;\n        var length_1 = cs.length;\n        var index = getNodeIndex2(_node) + 1;\n        for (var i = index; i < length_1; i++) {\n            p.removeChild(cs[index]);\n        }\n        _node = p;\n        p = p.parentNode;\n    }\n    _node.source.onBreak();\n}\nfunction parseWhileOrder(info, node, outerChildNodes, outerElement, props, part) {\n    return addOrderToNode(node, info, outerChildNodes, outerElement, props, part, function () {\n        return {\n            run: function () {\n                var p = this.node.parentNode;\n                if (this.isBreak || !parseBool(execByScope(this.node, this.condition, null, outerChildNodes, outerElement, props, part))) {\n                    //全部删除\n                    removeBlockBetween(this.node, this.endNode);\n                    p.removeChild(this.node);\n                    p.removeChild(this.endNode);\n                }\n                else {\n                    var nodes = cloneBetween(this.node, this.endNode);\n                    this.node.parentNode.insertBefore2(createBreakElement(nodes, this), this.node);\n                }\n            },\n            onBreak: function () {\n                this.isBreak = true;\n            },\n            isBreak: false\n        };\n    });\n}\nfunction parseAsyncOrder(info, node, outerChildNodes, outerElement, props, part) {\n    return addOrderToNode(node, info, outerChildNodes, outerElement, props, part, function () {\n        return {\n            run: function () {\n                var order = this;\n                var ns = takeBlockBetween(this.node, this.endNode);\n                var delay = parseInt(this.condition);\n                if (delay === NaN) {\n                    delay = 0;\n                }\n                removeNode(this.endNode);\n                var mark = $node('async', 8);\n                replaceNodeByNode(this.node, mark);\n                this.endNode = null;\n                this.node = null;\n                setTimeout(function () {\n                    var elem = $node('div');\n                    var p = mark.parentNode;\n                    replaceNodeByNode(mark, elem);\n                    mark = null;\n                    appendNodes(ns, elem);\n                    var chds = elem.childNodes;\n                    initHTML(chds, outerChildNodes, outerElement, props, part);\n                    takeOutChildNodes(elem);\n                    elem = null;\n                    replaceCls();\n                }, delay);\n            }\n        };\n    });\n}\nfunction parseSwitchOrder(info, node, outerChildNodes, outerElement, props, part) {\n    return addOrderToNode(node, info, outerChildNodes, outerElement, props, part, function () {\n        return {\n            value: execByScope(node, info.condition, null, outerChildNodes, outerElement, props, part),\n            hit: null,\n            needBreak: false,\n            endHit: null,\n            hasDefault: false,\n            run: function () {\n                var order = this;\n                var scope = $t.domScope.get(node);\n                treeEach(node.parentNode.childNodes, 'childNodes', function (node, step) {\n                    if (node.nodeType != 8)\n                        return;\n                    var info = getCommentStringInfo(getCommentText(node));\n                    if (!info)\n                        return;\n                    if (node.__order__) {\n                        step.next = getNodeIndex2(node.__order__.__endNode__) - getNodeIndex2(node);\n                        return;\n                    }\n                    switch (info.orderCase) {\n                        case 'case':\n                        case 'case break':\n                            if (order.hasDefault) {\n                                return SetParseError('语法错误：default后不应出现case/case break');\n                            }\n                            else if (!order.hit) {\n                                var isPass = order.value == execByScope(node, info.condition, scope, outerChildNodes, outerElement, props, part);\n                                if (isPass) {\n                                    order.hit = node;\n                                    node.__order__ = info.orderCase;\n                                }\n                            }\n                            else if (!order.endHit) {\n                                order.endHit = node;\n                            }\n                            break;\n                        case 'default':\n                            if (order.hasDefault) {\n                                return SetParseError('语法错误：多余的default');\n                            }\n                            else {\n                                order.hasDefault = true;\n                                if (!order.hit) {\n                                    order.hit = node;\n                                    node.__order__ = info.orderCase;\n                                }\n                                else if (!order.endHit) {\n                                    order.endHit = node;\n                                }\n                            }\n                            break;\n                    }\n                }, getNodeIndex2(node) + 1);\n                var p = this.node.parentNode;\n                if (!this.hit) {\n                    /*全部删除*/\n                    removeBlockBetween(this.node, node);\n                    p.removeChild(this.node);\n                    p.removeChild(this.endNode);\n                }\n                else {\n                    if (!this.endHit) {\n                        this.endHit = this.endNode;\n                    }\n                    //删除hit前的数据\n                    removeBlockBetween(this.node, this.hit);\n                    //外置hit的数据\n                    var ns = takeBlockBetween(this.hit, this.endHit);\n                    insertNodesBefore(this.node, ns);\n                    removeNode(this.hit);\n                    if (this.hit.order === 'case break' /*已终止选择*/ || this.endHit === this.endNode /*已结束*/) {\n                        /*全部删除*/\n                        removeBlockBetween(this.node, this.endNode);\n                        p.removeChild(this.node);\n                        p.removeChild(this.endNode);\n                    }\n                }\n                delete this.node.order;\n            }\n        };\n    });\n}\nfunction parseForOrder(info, node, outerChildNodes, outerElement, props, part) {\n    return addOrderToNode(node, info, outerChildNodes, outerElement, props, part, function () {\n        var check;\n        if (parseForOrderRE.test(info.condition)) {\n            check = (function () {\n                var s = info.condition.split(' in '), index = 0, names = [], source;\n                return function () {\n                    if (!source) {\n                        source = execByScope(node, s[1], null, outerChildNodes, outerElement, props, part);\n                        if (!source) {\n                            return { result: false, params: null };\n                        }\n                        for (var i in source) {\n                            names.push(i);\n                        }\n                        if (names.length == 0) {\n                            return { result: false, params: null };\n                        }\n                    }\n                    if (index < names.length) {\n                        execByScope(node, s[0] + '=\\'' + names[index] + '\\';', null, outerChildNodes, outerElement, props, part);\n                        index++;\n                        return { result: true, params: null };\n                    }\n                    else {\n                        return { result: false, params: null };\n                    }\n                };\n            }());\n        }\n        else if (parseForOrderRE2.test(info.condition)) {\n            check = (function () {\n                var isFirst = true;\n                var s = info.condition.split(';');\n                if (s.length == 2) {\n                    return function () {\n                        return { result: false, params: null };\n                    };\n                }\n                return function () {\n                    if (isFirst) {\n                        isFirst = false;\n                        execByScope(node, s[0], null, outerChildNodes, outerElement, props, part);\n                    }\n                    else {\n                        execByScope(node, s[2], null, outerChildNodes, outerElement, props, part);\n                    }\n                    return { result: execByScope(node, s[1], null, outerChildNodes, outerElement, props, part), params: null };\n                };\n            }());\n        }\n        else {\n            check = function () {\n                return { result: false, params: null };\n            };\n        }\n        return {\n            check: check,\n            run: function () {\n                var p = this.node.parentNode;\n                var ret = this.check();\n                if (this.isBreak || !ret.result) {\n                    //全部删除\n                    removeBlockBetween(this.node, this.endNode);\n                    p.removeChild(this.node);\n                    p.removeChild(this.endNode);\n                }\n                else {\n                    var nodes = cloneBetween(this.node, this.endNode);\n                    this.node.parentNode.insertBefore2(createBreakElement(nodes, this), this.node);\n                }\n            },\n            onBreak: function () {\n                this.isBreak = true;\n            },\n            isBreak: false\n        };\n    });\n}\nfunction createBreakElement(nodes, order) {\n    var breakElement = $node('__break__');\n    for (var i = 0; i < nodes.length; i++) {\n        breakElement.appendChild(nodes[i]);\n    }\n    breakElement.source = order;\n    return breakElement;\n}\nfunction parseCommentOrder(info, node, outerChildNodes, outerElement, props, part) {\n    switch (info.order) {\n        case 'scope':\n            parseScopeOrder(info, node, outerChildNodes, outerElement, props, part);\n            break;\n        case 'let':\n            execScope(info.condition, node, outerChildNodes, outerElement, props, part);\n            removeNode(node);\n            break;\n        case 'bind':\n            bindPropertyByOrder(node, info.condition);\n            break;\n        case '-':\n            bindExpressionsByOrder(node, info.condition);\n            break;\n        case '!':\n            execByScope(node, info.condition, null, outerChildNodes, outerElement, props, part);\n            removeNode(node);\n            break;\n        case '=':\n            var v = execByScope(node, info.condition, null, outerChildNodes, outerElement, props, part);\n            if (isObject(v) && v.nodeType) {\n                replaceNodeByNode(node, v);\n            }\n            else {\n                replaceNodeByNode(node, $node(v, 3));\n            }\n            break;\n        case 'content':\n            replaceNodeByNodes(node, outerChildNodes);\n            break;\n        case 'elements':\n            replaceNodeByNodes(node, outerElement);\n            break;\n        case 'while':\n            return parseWhileOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'if':\n            return parseIfOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'break':\n            return parseBreakOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'for':\n            return parseForOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'switch':\n            return parseSwitchOrder(info, node, outerChildNodes, outerElement, props, part);\n        case 'async':\n            return parseAsyncOrder(info, node, outerChildNodes, outerElement, props, part);\n    }\n}\nfunction parseComment(node, outerChildNodes, outerElement, props, part) {\n    var info = getCommentStringInfo(getCommentText(node));\n    if (!info)\n        return;\n    if (!info.order) {\n        alert(\"语法错误：不恰当的\" + info.orderCase);\n        return;\n    }\n    parseCommentOrder(info, node, outerChildNodes, outerElement, props, part);\n    if (node.order) {\n        if (node.order.endNode) {\n            node.order.run();\n        }\n    }\n}\nvar XHR = (function () {\n    function XHR() {\n    }\n    XHR.prototype.send = function (type, url, data, async, fn, fnerror) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(type, url, !!async);\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n                if (xhr.status === 200 || xhr.status === 0) {\n                    if (xhr.responseText.length > 0) {\n                        fn(xhr.responseText);\n                    }\n                }\n            }\n        };\n        type == 'POST' && xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        xhr.onerror = fnerror;\n        xhr.send(data);\n    };\n    XHR.prototype.get = function (url, async, fn, fnerror) {\n        this.send('GET', url, undefined, async, fn, fnerror);\n    };\n    XHR.prototype.post = function (url, data, async, fn, fnerror) {\n        this.send('POST', url, data, async, fn, fnerror);\n    };\n    return XHR;\n}());\n/// <reference path=\"../global.ts\"/>\n/// <reference path=\"../core.ts\"/>\n/// <reference path=\"../Execute.ts\"/>\n/// <reference path=\"../bind.ts\"/>\n/// <reference path='TemplateConfig.ts'/>\n/// <reference path='PartOrderCore.ts'/>\n/// <reference path='../XHR.ts'/>\nvar $DOM, $node, operatorRE = /\\!=|==|=|<|>|\\|/;\nfunction getScopeBy(scope, node) {\n    if (!scope)\n        return $t.domScope.get(node);\n    else\n        return scope;\n}\nfunction execByScope(node, s, scope, outer, outerElement, props, part) {\n    return _execByScope.call(getScopeBy(scope, node), s, node, outer, outerElement, props, part);\n}\nfunction execScope(s, node, outerChildNodes, outerElement, props, part) {\n    execByScope(node, '$t.extend(this,{' + s + '});', null, outerChildNodes, outerElement, props, part);\n}\nfunction setNodeProperty(node, proName, condition, outerChildNodes, outerElement, props, part) {\n    var v = execByScope(node, condition, null, outerChildNodes, outerElement, props, part);\n    var name = camelCase(proName.substr(0, proName.length - 1));\n    if (name.indexOf(\".\") != -1) {\n        var obj2 = node;\n        name = name.split(\".\");\n        for (var i = 0; i < name.length - 1; i++) {\n            obj2 = obj2[name[i]];\n            if (!obj2)\n                return;\n        }\n        name = name[name.length - 1];\n        obj2[name] = v;\n    }\n    else {\n        node.setAttribute(name, v);\n    }\n}\nfunction setQuestionAtrr(node, outerChildNodes, outerElement, props, part) {\n    var attrs = slice.call(node.attributes);\n    for (var i = 0; i < attrs.length; i++) {\n        var name_1 = attrs[i].name;\n        if (name_1.length > 1) {\n            if (name_1[name_1.length - 1] === ':') {\n                setNodeProperty(node, name_1, takeAttr(node, name_1), outerChildNodes, outerElement, props, part);\n            }\n            else if (name_1[0] === ':') {\n                bindNodeProperty(node, name_1.substring(1, name_1.length), takeAttr(node, name_1));\n            }\n        }\n    }\n}\nfunction getTemplate(node) {\n    var nodeName = node.nodeName;\n    if (templateConfig.hasOwnProperty(nodeName)) {\n        if (templateConfig[nodeName].hasOwnProperty('getData')) {\n            return templateConfig[nodeName].getData(node);\n        }\n        else {\n            return node.innerHTML;\n        }\n    }\n}\nfunction defineServiceByNode(node) {\n    var name = node.getAttribute('service');\n    if (name) {\n        var partType = node.getAttribute('ui');\n        if (partType) {\n            if ($t.T.hasOwnProperty(partType)) {\n                /*把服务定义到组件*/\n                $t.T[partType].service.define(name, getTemplate(node));\n            }\n            else {\n                throwError('不能定义service：' + name + '到' + partType + '上');\n            }\n        }\n        else {\n            if (!$t.service.hasOwnProperty(name)) {\n                $t.service.define(name, getTemplate(node));\n            }\n            else {\n                throwError('不能重复定义service：' + name);\n            }\n        }\n    }\n    removeNode(node);\n}\nfunction getExtendsByNode(node, sortPath) {\n    var ext = getAttr(node, 'extends', null);\n    if (isString(ext)) {\n        return getExtends(ext, sortPath);\n    }\n}\nfunction defineUIByNode(node) {\n    var name = getAttr(node, 'ui');\n    var ext = getExtendsByNode(node, 'ui');\n    if (name) {\n        $t.T.define(name, '', '', getTemplate(node), ext);\n    }\n    removeNode(node);\n}\nfunction defineClasses(node) {\n    $t.defineClassNames.push(getAttr(node, 'class'), trimLine(getTemplate(node)));\n    removeNode(node);\n}\nfunction parseDefine(node) {\n    switch (true) {\n        case node.hasAttribute('service'):\n            defineServiceByNode(node);\n            break;\n        case node.hasAttribute('ui'):\n            defineUIByNode(node);\n            break;\n        case node.hasAttribute('class'):\n            defineClasses(node);\n            break;\n    }\n}\nfunction isDefine(node) {\n    switch (true) {\n        case node.hasAttribute('service'):\n        case node.hasAttribute('ui'):\n        case node.hasAttribute('class'):\n            return true;\n    }\n    return false;\n}\nfunction isTemplate(node) {\n    var nodeName = node.nodeName;\n    if (templateConfig.hasOwnProperty(nodeName)) {\n        if (templateConfig[nodeName].hasOwnProperty('type')) {\n            return getAttr(node, 'type') === 'xmp';\n        }\n        else {\n            return true;\n        }\n    }\n    return false;\n}\nfunction findTemplates(nodes) {\n    var temps = [];\n    treeEach(nodes, 'children', function (node) {\n        if (isTemplate(node)) {\n            temps.push(node);\n        }\n    });\n    return temps;\n}\nfunction parseUITemplate(uiName, uiSortPath, uiPath, sHTML) {\n    var vDOM = $DOM(sHTML), cs = vDOM.children, i = 0, node, s, name, nodeName;\n    for (; i < cs.length; i++) {\n        node = cs[i];\n        if (!isTemplate(node)) {\n            alert('最上层必须是ui/service模板标签');\n            return;\n        }\n        if (node.hasAttribute('service')) {\n            defineServiceByNode(node);\n            i--;\n        }\n        else {\n            nodeName = node.getAttribute('ui');\n            if (!nodeName)\n                nodeName = uiName;\n            if (!$t.T.hasOwnProperty(nodeName)) {\n                s = getTemplate(node);\n                $t.T.define(nodeName, uiSortPath, uiPath, s, getExtendsByNode(node, uiSortPath));\n            }\n            else {\n                alert('不能重复定义ui：' + nodeName);\n            }\n        }\n    }\n}\nfunction importUIHTML(uiName, uiSortPath) {\n    if (!$t.T.hasOwnProperty(uiName)) {\n        var uiPath_1 = baseUIPath.getPathBySortPath(uiSortPath);\n        $t.xhr.get(uiPath_1 + '/' + (uiName + '.html').toLowerCase(), false, function (text) {\n            parseUITemplate(uiName, uiSortPath, uiPath_1, text);\n        });\n    }\n    return $t.T[uiName];\n}\nfunction getExtends(extName, sortPath) {\n    var ext;\n    if (extName.indexOf(':') !== -1) {\n        extName = extName.split(':');\n        sortPath = extName[0] ? extName[0] : sortPath;\n        extName = extName[1];\n    }\n    if (!isObject(importUIHTML(extName, sortPath))) {\n        throwError('找不到可继承的模板：' + extName);\n    }\n    ext = $t.T[extName];\n    return ext;\n}\nfunction parseAsync(node, outerChildNodes, outerElement, props, part) {\n    var delay = parseInt(execByScope(node, node.getAttribute('async'), null, outerChildNodes, outerElement, props, part));\n    node.removeAttribute('async');\n    var mark = $node('async', 8);\n    replaceNodeByNode(node, mark);\n    if (delay === NaN) {\n        delay = 0;\n    }\n    setTimeout(function () {\n        replaceNodeByNode(mark, node);\n        mark = null;\n        initHTML([node], outerChildNodes, outerElement, props, part);\n        replaceCls();\n    }, delay);\n}\nfunction parseLazy(node, outerChildNodes, outerElement, props, part) {\n    node.removeAttribute('lazy');\n    initHTML(node.childNodes, outerChildNodes, outerElement, props, part);\n}\nfunction getUIInfo(node) {\n    var nodeName = node.nodeName;\n    if (nodeName === 'SCRIPT' && getAttr(node, 'type') === 'ui') {\n        return node.getAttribute('name').toLowerCase();\n    }\n    else if (nodeName.indexOf(':')) {\n        var c = nodeName.split(':');\n        var sortPath = c[0].toLowerCase();\n        if (baseUIPath.hasSortPath(sortPath)) {\n            return { sortPath: sortPath, name: c[1].toLowerCase() };\n        }\n    }\n}\nfunction parseUI(node, uiInfo, step, part) {\n    var partName, reExtends, outerChildNodes, outerElement, cpn, ui = importUIHTML(uiInfo.name, uiInfo.sortPath);\n    if (!ui) {\n        removeNode(node);\n        throwError(uiInfo.name + '组件不存在！');\n        return;\n    }\n    partName = takeAttr(node, 'p-name');\n    reExtends = takeAttr(node, 're-extends');\n    outerChildNodes = slice.call(node.childNodes);\n    outerElement = slice.call(node.children);\n    var chds = node.childNodes;\n    for (var i = chds.length; i > 0; i--) {\n        node.removeChild(chds[0]);\n    }\n    cpn = ui.render(node, node.parentNode, outerChildNodes, outerElement, null, part, partName, reExtends);\n    if (cpn) {\n        step.next = cpn.elementLength;\n    }\n}\nfunction parseGet(node, outerChildNodes, outerElement, props, part) {\n    removeNode(node);\n    var name = getAttr(node, 'name');\n    if (name) {\n        initHTML(node.childNodes, outerChildNodes, outerElement, props, part);\n        $t.store[name] = node;\n        return 4 /* c_noIn */;\n    }\n    var toRef = getAttr(node, 'to-p-ref');\n    if (toRef && part) {\n        toRef = '$' + toRef;\n        if (part[toRef]) {\n            appendNodes(node.childNodes, part[toRef]);\n            initHTML(part[toRef].childNodes, outerChildNodes, outerElement, props, part);\n            node.innerHTML = '';\n        }\n    }\n}\nfunction parseSet(node, outerChildNodes, outerElement, props, part) {\n    if (node.hasAttribute('link')) {\n        /*设置关联子对象*/\n        var link = takeAttr(node, 'link');\n        var chds = $t.store.takeElem(link);\n        if (chds !== null) {\n            if (typeof chds === 'IHTMLElement') {\n                node.appendChild(chds);\n            }\n            else {\n                appendNodes(chds, node.children[0]);\n            }\n            takeOutChildNodes(node);\n        }\n        else {\n            removeNode(node);\n        }\n    }\n    else {\n        var ns = void 0;\n        /*设置属性*/\n        if (node.children.length > 0) {\n            /*设置子对象*/\n            ns = node.children;\n        }\n        else if (node.parentNode) {\n            /*设置父对象*/\n            ns = [node.parentNode];\n        }\n        else {\n            return;\n        }\n        var isAppend = !node.hasAttribute('append');\n        node.removeAttribute('append');\n        var attr = node.attributes;\n        for (var j = 0; j < ns.length; j++) {\n            if (isAppend) {\n                for (var i = 0; i < attr.length; i++) {\n                    ns[j].setAttribute(attr[i].name, attr[i].value);\n                }\n            }\n            else {\n                for (var i = 0; i < attr.length; i++) {\n                    var value = attr[i].value;\n                    var value2 = void 0;\n                    switch (attr[i].name) {\n                        case 'class':\n                            value2 = ns[j].getAttribute(attr[i].name);\n                            if (value2) {\n                                value += (/ $/.test(value) ? '' : ' ') + value2;\n                            }\n                            break;\n                        case 'style':\n                            value2 = ns[j].getAttribute(attr[i].name);\n                            if (value2) {\n                                value += (/; *$/.test(value) ? '' : ';') + value2;\n                            }\n                            break;\n                    }\n                    ns[j].setAttribute(attr[i].name, value);\n                }\n            }\n        }\n        takeOutChildNodes(node);\n    }\n    return 4 /* c_noIn */;\n}\nvar includeJSFiles = (function () {\n    var IncludeTask = (function () {\n        function IncludeTask(parent, files, callback) {\n            this.parent = parent;\n            this.callback = callback;\n            this.child = null;\n            this.isallload = false;\n            this.count = 0;\n            if (parent) {\n                parent.child = this;\n            }\n            var arr;\n            if (isArray(files)) {\n                arr = files;\n                for (var i in arr) {\n                    var url = files[i];\n                    if (isString(url) && !(url in IncludeTask.jsScript)) {\n                        arr.push(url);\n                        IncludeTask.jsScript[url] = $node(\"script\");\n                    }\n                }\n            }\n            else if (files) {\n                arr = [];\n                var url = files;\n                if (isString(url) && !(url in IncludeTask.jsScript)) {\n                    arr.push(url);\n                    IncludeTask.jsScript[url] = $node(\"script\");\n                }\n            }\n            this.files = arr;\n        }\n        IncludeTask.prototype.onallload = function () {\n            this.isallload = true;\n            if (this.child == null) {\n                setIncludeTaskDone(this, this.callback);\n            }\n            else if (this.child.isallload) {\n                setIncludeTaskDone(this, this.callback);\n            }\n            if (this.parent != null) {\n                this.parent.onchildallload();\n            }\n        };\n        IncludeTask.prototype.onchildallload = function () {\n            if (this.isallload) {\n                setIncludeTaskDone(this, this.callback);\n            }\n        };\n        IncludeTask.jsScript = newHashObject('JSHash');\n        return IncludeTask;\n    }());\n    var includeTask;\n    function setIncludeTaskDone(task, fn) {\n        includeTask = task.parent;\n        if (includeTask != null)\n            includeTask.child = null;\n        task.child = null;\n        if (isFunction(fn))\n            fn();\n    }\n    function includeJSFile(task) {\n        if (task.files.length > 0) {\n            var url = task.files.shift();\n            var scriptNode = IncludeTask.jsScript[url];\n            scriptNode.src = url;\n            task.count++;\n            scriptNode.onload = function () {\n                task.count--;\n                includeJSFile(task);\n            };\n            document.head.appendChild(scriptNode);\n        }\n        else if (task.count == 0) {\n            task.onallload();\n        }\n    }\n    return function (files, callback) {\n        includeTask = new IncludeTask(includeTask, files, callback);\n        includeJSFile(includeTask);\n    };\n}());\nfunction execOnScript(node, outerChildNodes, outerElement, props, part) {\n    var p = node.parentNode;\n    if (p) {\n        var script = node.innerHTML;\n        if (script.length > 0) {\n            /*设置父对象事件*/\n            var events = exec('({' + script + '})');\n            for (var i in events) {\n                if (isFunction(events[i])) {\n                    p.addEventListener(i, events[i]);\n                }\n            }\n        }\n    }\n}\nfunction execScript(node, outerChildNodes, outerElement, props, part) {\n    var script = node.innerHTML;\n    if (script.length > 0) {\n        var fn;\n        var keyVar = String(getAttr(node, 'var', ''));\n        var arrKeyVar;\n        fn = Function('outer,outerElement,props,part' + (keyVar ? ',' : '') + keyVar, script);\n        var args = [outerChildNodes, outerElement, props, part];\n        if (keyVar.length > 0) {\n            arrKeyVar = keyVar.split(',');\n            for (var i = 0; i < arrKeyVar.length; i++) {\n                var ui = $t.refs[arrKeyVar[i]];\n                if (ui) {\n                    args.push(ui[ui.length - 1]);\n                }\n                else {\n                    args.push(null);\n                }\n            }\n        }\n        try {\n            fn.apply(node.parentNode, args);\n        }\n        catch (e) {\n            _catch(e);\n        }\n        fn = null;\n    }\n}\nfunction execTurtleScript(node, outerChildNodes, outerElement, props, part) {\n    var type = getAttr(node, 'type', null);\n    if (type == 'on') {\n        execOnScript(node, outerChildNodes, outerElement, props, part);\n    }\n    else {\n        execScript(node, outerChildNodes, outerElement, props, part);\n    }\n}\nfunction parseScript(node, outerChildNodes, outerElement, props, part) {\n    if (node.type == \"\" || node.type == \"on\" || node.type == \"text/javascript\") {\n        var src = getAttr(node, 'src', '');\n        if (src) {\n            includeJSFiles(src);\n        }\n        else {\n            execTurtleScript(node, outerChildNodes, outerElement, props, part);\n        }\n        removeNode(node);\n    }\n}\nfunction execNodeQuestion(node, outerChildNodes, outerElement, props, part) {\n    var v = takeAttr(node, ':');\n    if (v.length > 0) {\n        execByScope(node, v, null, outerChildNodes, outerElement, props, part);\n    }\n}\nfunction bindNode(node, obj, name) {\n    var elementValueName, eventName;\n    switch (node.nodeName) {\n        case \"SELECT\":\n            elementValueName = \"value\";\n            eventName = \"change\";\n            break;\n        case \"TEXTAREA\":\n            elementValueName = \"value\";\n            eventName = \"input\";\n            break;\n        case \"INPUT\":\n            switch (node.type) {\n                case \"checkbox\":\n                    elementValueName = \"checked\";\n                    eventName = \"click\";\n                    break;\n                default:\n                    elementValueName = \"value\";\n                    eventName = \"input\";\n                    break;\n            }\n            break;\n        case \"#text\":\n            elementValueName = \"data\";\n            break;\n        case \"BUTTON\":\n        case \"DIV\":\n        default:\n            elementValueName = \"innerHTML\";\n            break;\n    }\n    if (!node.__bind__) {\n        node[elementValueName] = obj[name];\n    }\n    bindElementProperty(obj, name, node, elementValueName);\n    if (eventName) {\n        node.addEventListener(eventName, function () {\n            obj[name] = node[elementValueName];\n        });\n    }\n}\nfunction bindNodeByCondition(node, condition) {\n    var cdtn = splitByOnce(condition, \"|\"), name = cdtn[0], arrName, scope, obj, exp;\n    if (!name) {\n        return;\n    }\n    scope = $t.domScope.get(node);\n    if (name.indexOf(\".\") != -1) {\n        arrName = name.split(\".\");\n        obj = _getBindObject(scope, arrName);\n        name = arrName[arrName.length - 1];\n    }\n    else {\n        obj = _getBindObject(scope, [name]);\n    }\n    if (obj === null) {\n        throwError('不能获取绑定属性:' + cdtn[0]);\n        return;\n    }\n    if (cdtn.length === 2) {\n        exp = function (v) {\n            _execExpressionsByScope(cdtn[1], v, node);\n        };\n        exp.__me__ = exp;\n        bindProperty(obj, name, exp, \"__me__\");\n    }\n    else {\n        bindNode(node, obj, name);\n    }\n}\nfunction bindNodeFunction(node, bindVar, fn) {\n    var name, scope, obj;\n    if (bindVar.indexOf(\".\") != -1) {\n        bindVar = bindVar.split(\".\");\n    }\n    else {\n        bindVar = [bindVar];\n    }\n    name = bindVar[bindVar.length - 1];\n    scope = $t.domScope.get(node);\n    obj = _getBindObject(scope, bindVar);\n    fn.__me__ = fn;\n    bindProperty(obj, name, fn, \"__me__\");\n    return { object: obj, name: name, targetObject: fn, targetName: \"__me__\" };\n}\nfunction bindEval(node, s, outer, outerElement, props, part, fn) {\n    var operator = s.match(operatorRE)[0], bindVar = splitByOnce(s, operator), sfn;\n    if (bindVar.length < 2)\n        return;\n    switch (operator) {\n        case \"|\":\n            sfn = bindVar[1];\n            break;\n        case \"=\":\n            operator = \"==\";\n        default:\n            sfn = 'v' + operator + bindVar[1];\n            break;\n    }\n    return bindNodeFunction(node, bindVar[0], function (v) {\n        fn.call(this, execValueByScope(node, sfn, v, this, outer, outerElement, props, part));\n    });\n}\nvar ElementParser = (function () {\n    function ElementParser() {\n        this.GET = parseGet;\n        this.SET = parseSet;\n        this.__BREAK__ = parseBreakOrder;\n        this.SCRIPT = parseScript;\n    }\n    return ElementParser;\n}());\nfunction bindShowHide(node, s, isBindShow, outer, outerElement, props, part) {\n    bindEval(node, s, outer, outerElement, props, part, function (v) {\n        if (v) {\n            if (isBindShow) {\n                removeClass(node, 'uhide');\n            }\n            else {\n                addClass(node, 'uhide');\n            }\n        }\n        else {\n            if (isBindShow) {\n                addClass(node, 'uhide');\n            }\n            else {\n                removeClass(node, 'uhide');\n            }\n        }\n    });\n}\nvar AttributeParser = (function () {\n    function AttributeParser() {\n    }\n    AttributeParser.prototype.ref = function (node, outerChildNodes, outerElement, props, part) {\n        var refName = node.getAttribute('ref');\n        node.removeAttribute('ref');\n        $t.refs.push(refName.split(','), node);\n    };\n    AttributeParser.prototype[\":\"] = function (node, outerChildNodes, outerElement, props, part) {\n        execNodeQuestion(node, outerChildNodes, outerElement, props, part);\n        setQuestionAtrr(node, outerChildNodes, outerElement, props, part);\n    };\n    AttributeParser.prototype['p-ref'] = function (node, outerChildNodes, outerElement, props, part) {\n        var refName = takeAttr(node, 'p-ref');\n        var arrRefName;\n        if (part && refName) {\n            arrRefName = refName.split(',');\n            for (var i = 0; i < arrRefName.length; i++) {\n                part['$' + arrRefName[i]] = node;\n            }\n        }\n    };\n    AttributeParser.prototype.bind = function (node, outerChildNodes, outerElement, props, part) {\n        bindNodeByCondition(node, takeAttr(node, 'bind'));\n    };\n    AttributeParser.prototype.remove = function (node, outerChildNodes, outerElement, props, part) {\n        var bindInfo = bindEval(node, takeAttr(node, 'remove'), outerChildNodes, outerElement, props, part, function (v) {\n            if (!v)\n                return;\n            removeBind(this, bindInfo.targetName, bindInfo.name);\n            removeNode(node);\n        });\n    };\n    AttributeParser.prototype.add = function (node, outerChildNodes, outerElement, props, part) {\n        var placeholder = $node('', 8);\n        replaceNodeByNode(node, placeholder);\n        var bindInfo = bindEval(node, takeAttr(node, 'add'), outerChildNodes, outerElement, props, part, function (v) {\n            if (!v)\n                return;\n            removeBind(this, bindInfo.targetName, bindInfo.name);\n            replaceNodeByNode(placeholder, node);\n        });\n    };\n    AttributeParser.prototype.show = function (node, outerChildNodes, outerElement, props, part) {\n        bindShowHide(node, takeAttr(node, 'show'), true, outerChildNodes, outerElement, props, part);\n    };\n    AttributeParser.prototype.hide = function (node, outerChildNodes, outerElement, props, part) {\n        bindShowHide(node, takeAttr(node, 'hide'), false, outerChildNodes, outerElement, props, part);\n    };\n    AttributeParser.prototype.cls = function (node, outerChildNodes, outerElement, props, part) {\n        $t.replaceClassStore.push(node);\n        /*不要删node.removeAttribute('cls');*/\n    };\n    AttributeParser.prototype['p-main'] = function (node, outerChildNodes, outerElement, props, part) {\n        if (part && !part.partMain) {\n            part.partMain = node;\n        }\n    };\n    return AttributeParser;\n}());\n;\nvar elementParser = new ElementParser;\nvar attributeParser = new AttributeParser;\nfunction initHTML(arr, outerChildNodes, outerElement, props, part) {\n    treeEach(arr, 'childNodes', function (node, step) {\n        if (node.nodeType === 8) {\n            try {\n                parseComment(node, outerChildNodes, outerElement, props, part);\n            }\n            catch (e) {\n                _catch(e);\n            }\n            return 4 /* c_noIn */;\n        }\n        if (node.nodeType !== 1) {\n            return;\n        }\n        if (node.hasAttribute('async')) {\n            parseAsync(node, outerChildNodes, outerElement, props, part);\n            return 2 /* c_repeat */;\n        }\n        if (node.hasAttribute('lazy')) {\n            parseLazy(node, outerChildNodes, outerElement, props, part);\n            return 4 /* c_noIn */ | 2 /* c_repeat */;\n        }\n        var uiInfo = getUIInfo(node);\n        if (uiInfo) {\n            parseUI(node, uiInfo, step, part);\n            return 4 /* c_noIn */ | 8 /* c_noRepeat */;\n        }\n        /*if(isTemplate(node)){\n            parseTemp(node);\n            return;\n        }*/\n        if (elementParser.hasOwnProperty(node.nodeName)) {\n            /* let ret=*/ return elementParser[node.nodeName](node, outerChildNodes, outerElement, props, part);\n        }\n        var attrs = slice.call(node.attributes);\n        for (var i = 0; i < attrs.length; i++) {\n            if (attributeParser.hasOwnProperty(attrs[i].name)) {\n                attributeParser[attrs[i].name](node, outerChildNodes, outerElement, props, part);\n            }\n        }\n    });\n}\nfunction getParts(childNodes) {\n    var child = [];\n    var cpn = null;\n    treeEach(childNodes, \"childNodes\", function (node) {\n        if (node.nodeType === 8 && node.__part__) {\n            if (cpn !== null) {\n                if (node.__part__ === cpn && node.__sign__ === 0) {\n                    child.push(node.__part__);\n                    cpn = null;\n                }\n            }\n            else {\n                cpn = node.__part__;\n            }\n            return;\n        }\n        if (cpn !== null) {\n            return 4 /* c_noIn */;\n        }\n    });\n    return child;\n}\nfunction getService(serviceName) {\n    if (!$t.service.hasOwnProperty(serviceName)) {\n        $t.xhr.get($t.config.baseServicePath + '/' + (serviceName + '.js').toLowerCase(), false, function (text) {\n            $t.service.define(serviceName, text);\n        });\n    }\n    return $t.service[serviceName];\n}\nfunction nodesToString(nodes) {\n    var s = '';\n    for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].nodeType === 8) {\n            s += '<!--' + nodes[i].data + '-->';\n        }\n        else if (nodes[i].nodeType === 3) {\n            try {\n                s += nodes[i].data;\n            }\n            catch (e) { }\n        }\n        else if (nodes[i].nodeType === 1) {\n            s += nodes[i].outerHTML;\n        }\n    }\n    return s;\n}\n/// <reference path='../core.ts'/>\n/// <reference path='PartCore.ts'/>\nvar memberRE = /{([\\-a-zA-Z\\d\\.\\%\\u4e00-\\u9fa5]+)(\\!)?((['\"]?)-?[\\-a-zA-Z\\d\\.\\%\\u4e00-\\u9fa5]*?\\4)(\\!)?((['\"]?)-?[\\-a-zA-Z\\d\\.\\%\\u4e00-\\u9fa5]*?\\7)}(\\.(([a-zA-Z][a-zA-Z\\d]+)(\\([a-zA-Z\\d\\-\\.\\,\\;\\%\\u4e00-\\u9fa5]*\\))?))?/g;\nvar colorRE = /^\\s*((#[\\dabcdefABCDEF]{3,6})|(rgba\\(.*\\)))\\s*$/;\nvar PartParamFilter = (function () {\n    function PartParamFilter() {\n    }\n    PartParamFilter.bool = function (v) {\n        return parseBool(v);\n    };\n    PartParamFilter.intmin = function (v, p) {\n        v = parseInt(v);\n        p = parseInt(p);\n        if (v < p || isNaN(v)) {\n            v = p;\n        }\n        return v;\n    };\n    PartParamFilter.string = function (v) {\n        return '\"' + v + '\"';\n    };\n    PartParamFilter.floatmin = function (v, p) {\n        v = parseFloat(v);\n        p = parseFloat(p);\n        if (v < p || isNaN(v)) {\n            v = p;\n        }\n        return v;\n    };\n    PartParamFilter.int = function (v) {\n        return parseInt(v);\n    };\n    PartParamFilter.float = function (v) {\n        return parseFloat(v);\n    };\n    PartParamFilter.pxtoem = function (v, p) {\n        p = parseFloat(p);\n        if (isNaN(p)) {\n            p = 0;\n        }\n        return (parseFloat(v) / 16 + p) + 'em';\n    };\n    PartParamFilter.color = function (v) {\n        if (colorRE.test(v)) {\n            return v;\n        }\n        else {\n            return 'transparent';\n        }\n    };\n    PartParamFilter.date = function (v, p) {\n        var d = new Date(v);\n        if (d.toDateString() === 'Invalid Date') {\n            d = new Date();\n        }\n        return dateFormat(p, d);\n    };\n    PartParamFilter.only = function (v, p) {\n        if (p.indexOf(';') === -1) {\n            return v;\n        }\n        var arr = p.split(';'), datas = arr[0].split(','), filter;\n        if (arr.length > 0) {\n            filter = arr[1];\n        }\n        else {\n            filter = '';\n        }\n        if (datas.indexOf(v) !== -1) {\n            return v;\n        }\n        else {\n            return filter;\n        }\n    };\n    PartParamFilter.udftotrue = function (v) {\n        return v === undefined ? true : v;\n    };\n    PartParamFilter.anytotrue = function (v) {\n        return v !== undefined ? true : v;\n    };\n    PartParamFilter.udftofalse = function (v) {\n        return v === undefined ? false : v;\n    };\n    PartParamFilter.anytofalse = function (v) {\n        return v !== undefined ? false : v;\n    };\n    PartParamFilter.udftonull = function (v) {\n        return v === undefined ? null : v;\n    };\n    PartParamFilter.anytonull = function (v) {\n        return v !== undefined ? null : v;\n    };\n    PartParamFilter.udftoemptystr = function (v) {\n        return v === undefined ? \"\" : v;\n    };\n    PartParamFilter.anytoemptystr = function (v) {\n        return v !== undefined ? \"\" : v;\n    };\n    return PartParamFilter;\n}());\nvar PartParam = (function () {\n    function PartParam(name, hasDefault, filter, filterParam, defaultValue, limitValue) {\n        this.name = name;\n        this.hasDefault = hasDefault;\n        this.filter = filter;\n        this.filterParam = filterParam;\n        this.defaultValue = defaultValue;\n        this.limitValue = limitValue;\n    }\n    return PartParam;\n}());\nvar PartBase = (function () {\n    function PartBase(template, extPart, props, html, outerChildNodes, outerElement) {\n        this.template = template;\n        this.props = props;\n        this.store = [];\n        this.$ = new Service(template.service);\n        this.partName = template.partName;\n        if (extPart) {\n            /**继承 */\n            this.__proto__ = extPart;\n        }\n        this.super = extPart;\n        var dom = $DOM(html);\n        var nodes = dom.childNodes;\n        initHTML(nodes, outerChildNodes, outerElement, props, this);\n        for (var i = nodes.length; i > 0; i--) {\n            this.store.push(dom.removeChild(nodes[0]));\n        }\n    }\n    Object.defineProperty(PartBase.prototype, \"child\", {\n        get: function () {\n            return getParts(this.elements);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PartBase.prototype, \"elements\", {\n        get: function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    PartBase.prototype.emitResize = function () {\n        try {\n            if (!this.isInsert) {\n                return;\n            }\n            if (this.onresize) {\n                if (this.onresize()) {\n                    return;\n                }\n            }\n            var cs = this.child;\n            for (var i = 0; i < cs.length; i++) {\n                cs[i].emitResize();\n            }\n        }\n        catch (e) {\n            _catch(e);\n        }\n    };\n    PartBase.prototype.onSetSize = function (rect) {\n        if (this.partMain) {\n            var style = this.partMain.style;\n            style.left = rect.left + 'px';\n            style.top = rect.top + 'px';\n            style.width = rect.width + 'px';\n            style.height = rect.height + 'px';\n            style.boxSizing = 'border-box';\n            this.emitResize();\n        }\n    };\n    PartBase.prototype.getSuper = function (name) {\n        if (this.super) {\n            if (this.super.template.name === name) {\n                return this.super;\n            }\n            else {\n                return this.super.getSuper(name);\n            }\n        }\n    };\n    PartBase.prototype.emitInit = function (finalPart) {\n        if (this.super) {\n            this.super.emitInit(finalPart);\n        }\n        if (isFunction(this.oninit)) {\n            this.oninit(finalPart);\n        }\n    };\n    PartBase.prototype.setSize = function (rect) {\n        if (this.onSetSize) {\n            return this.onSetSize(rect);\n        }\n        if (this.super) {\n            this.super.setSize(rect);\n        }\n    };\n    return PartBase;\n}());\nvar Part = (function (_super) {\n    __extends(Part, _super);\n    function Part(template, extPart, props, html, outerChildNodes, outerElement) {\n        _super.call(this, template, extPart, props, html, outerChildNodes, outerElement);\n        this.props = props;\n        var name = template.name;\n        var dom = $DOM(html);\n        var begin = this.begin = $node(name, 8); // document.createComment('<'+name+'>');\n        var end = this.end = $node('/' + name, 8); //document.createComment('</'+name+'>')\n        end.__part__ = begin.__part__ = this;\n        begin.__sign__ = 1;\n        end.__sign__ = 0;\n        this.super = extPart;\n        this.resPath = template.path + '/' + template.name + '.res';\n        var sp = this;\n        while (sp.super) {\n            sp = sp.super;\n        }\n        this.basePart = sp ? sp : this;\n        this.basePart.isInsert = false;\n        var nodes = dom.childNodes;\n        initHTML(nodes, outerChildNodes, outerElement, props, this);\n        if (extPart) {\n            extPart.to(this);\n        }\n        var store = this.store;\n        store.push.apply(store, nodes);\n        for (var i = nodes.length; i > 0; i--) {\n            dom.removeChild(nodes[0]);\n        }\n        store.unshift(begin);\n        store.push(end);\n        this.emitInit(this);\n    }\n    Part.prototype.toString = function () {\n        return this.template.partName + \":\" + JSON.stringify(this.props);\n    };\n    Part.prototype.treeDiagram = function (tabSpace) {\n        if (tabSpace === undefined) {\n            tabSpace = 0;\n        }\n        var s = \"\\r\\n\" + new Array(tabSpace + 1).join(\" \") + this.toString();\n        var child = this.child;\n        for (var i = 0; i < child.length; i++) {\n            s += child[i].treeDiagram(tabSpace + 8);\n        }\n        return s;\n    };\n    Object.defineProperty(Part.prototype, \"elementLength\", {\n        get: function () {\n            if (this.isInsert) {\n                return this.store.length;\n            }\n            else {\n                return 1;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Part.prototype, \"elements\", {\n        get: function () {\n            if (this.isExtends) {\n                return new ArrayEx();\n            }\n            if (this.isInsert) {\n                try {\n                    var elements = new ArrayEx();\n                    var node = this.begin.nextSibling;\n                    var end = this.end;\n                    while (node !== end) {\n                        elements.push(node);\n                        node = node.nextSibling;\n                    }\n                    return elements;\n                }\n                catch (e) {\n                    _catch(e);\n                    return new ArrayEx();\n                }\n            }\n            if (isArray(this.store)) {\n                return this.store.slice().splice(1, this.store.length - 2);\n            }\n            else {\n                return new ArrayEx();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Part.prototype.getParentPart = function (node) {\n        while (1) {\n            if (node.previousSibling !== null) {\n                node = node.previousSibling;\n            }\n            else if (node.parentNode !== null) {\n                node = node.parentNode;\n            }\n            else {\n                return null;\n            }\n            if (node.nodeType === 8 && node.part) {\n                if (node.sign === 0) {\n                    node = node.part.begin;\n                }\n                else {\n                    return node.part;\n                }\n            }\n        }\n    };\n    Object.defineProperty(Part.prototype, \"parent\", {\n        get: function () {\n            return this.getParentPart(this.begin);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Part.prototype.getRect = function () {\n        if (this.isInsert) {\n            var rects = [];\n            var rt = void 0;\n            //let recalNode           = document.createElement('div');\n            //recalNode.setAttribute('style',\"width:0 !important;height:0 !important;margin-left:0 !important;margin-right:0 !important;\");\n            // insertNodeBefore(this.begin,recalNode);\n            // rt=[recalNode.offsetLeft,recalNode.offsetTop];\n            // insertNodeBefore(this.end,recalNode);\n            // rt.push(recalNode.offsetLeft,recalNode.offsetTop);\n            // removeNode(recalNode);\n            // rects.push(rt);\n            var cs = this.elements;\n            var elem = void 0;\n            var dom = document.documentElement;\n            for (var i = 0; i < cs.length; i++) {\n                elem = cs[i].valueOf();\n                if (elem.nodeType === 1) {\n                    var l = 0, t = 0;\n                    var elem2 = elem;\n                    while (elem2 !== dom) {\n                        t += elem2.offsetTop;\n                        l += elem2.offsetLeft;\n                        elem2 = elem2.parentNode;\n                    }\n                    rects.push([l, t, elem.offsetWidth, elem.offsetHeight]);\n                }\n            }\n            var rect = { left: 0x7fffffff, top: 0x7fffffff, width: 0, height: 0, right: 0, bottom: 0 };\n            for (var i = 0; i < rects.length; i++) {\n                rt = rects[i];\n                if (rt[0] < rect.left) {\n                    rect.left = rt[0];\n                }\n                if (rt[1] < rect.top) {\n                    rect.top = rt[1];\n                }\n                var right = rt[0] + rt[2];\n                var bottom = rt[1] + rt[3];\n                if (right > rect.right) {\n                    rect.right = right;\n                }\n                if (bottom > rect.bottom) {\n                    rect.bottom = bottom;\n                }\n            }\n            rect.width = rect.right - rect.left;\n            rect.height = rect.bottom - rect.top;\n            return rect;\n        }\n        else {\n            return { left: 0, top: 0, width: 0, height: 0, right: 0, bottom: 0 };\n        }\n    };\n    Object.defineProperty(Part.prototype, \"innerHTML\", {\n        get: function () {\n            return nodesToString(this.elements);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Part.prototype, \"elemParent\", {\n        get: function () {\n            return this.begin.parentNode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Part.prototype.insertTo = function (elem) {\n        if (this.isInsert) {\n            var elems = this.elements;\n            elems.unshift(this.begin);\n            elems.push(this.end);\n            /*cut scope*/\n            var scopeNodes = this.scopeNodes;\n            for (var i = 0; i < scopeNodes.length; i++) {\n                $t.domScope.unlink(scopeNodes[i].scope);\n            }\n            appendNodes(elems, elem);\n            /*link scope*/\n            for (var i = 0; i < scopeNodes.length; i++) {\n                $t.domScope.link(scopeNodes[i].scope, elem);\n            }\n            if (isFunction(this.oninsert)) {\n                this.oninsert(elem);\n            }\n        }\n        else {\n            appendNodes(this.store, elem);\n            /*link scope*/\n            var scopeNodes = this.scopeNodes;\n            for (var i = 0; i < scopeNodes.length; i++) {\n                $t.domScope.link(scopeNodes[i].scope, elem);\n            }\n            if (isFunction(this.oninsert)) {\n                this.oninsert(elem);\n            }\n            this.isInsert = true;\n        }\n    };\n    Part.prototype.insertBefore = function (elem) {\n        if (this.isInsert) {\n            var elems = this.elements;\n            elems.unshift(this.begin);\n            elems.push(this.end);\n            /*cut scope*/\n            var scopeNodes = this.scopeNodes;\n            for (var i = 0; i < scopeNodes.length; i++) {\n                $t.domScope.unlink(scopeNodes[i].scope);\n            }\n            insertNodesBefore(elem, elems);\n            /*link scope*/\n            for (var i = 0; i < scopeNodes.length; i++) {\n                $t.domScope.link(scopeNodes[i].scope, elem);\n            }\n            if (isFunction(this.oninsert)) {\n                this.oninsert(elem);\n            }\n        }\n        else {\n            insertNodesBefore(elem, this.store);\n            /*link scope*/\n            var scopeNodes = this.scopeNodes;\n            for (var i = 0; i < scopeNodes.length; i++) {\n                $t.domScope.link(scopeNodes[i].scope, elem);\n            }\n            if (isFunction(this.oninsert)) {\n                this.oninsert(elem);\n            }\n            this.basePart.isInsert = true;\n        }\n    };\n    Part.prototype.remove = function () {\n        if (this.isInsert) {\n            var elems = this.elements;\n            elems.unshift(this.begin);\n            elems.push(this.end);\n            var scopeNodes = this.scopeNodes;\n            /*cut scope*/\n            for (var i = 0; i < scopeNodes.length; i++) {\n                $t.domScope.unlink(scopeNodes[i].scope);\n            }\n            var p = this.begin.parentNode;\n            if (p !== null) {\n                for (var i = 0; i < elems.length; i++) {\n                    p.removeChild(elems[i]);\n                }\n            }\n            this.store = elems;\n            this.basePart.isInsert = false;\n            if (isFunction(this.onremove)) {\n                this.onremove();\n            }\n            if (this.parent) {\n                this.parent.emitResize();\n            }\n        }\n    };\n    Object.defineProperty(Part.prototype, \"scopeNodes\", {\n        get: function () {\n            var scopeNodes = [];\n            treeEach(this.elements, \"children\", function (node) {\n                if (node.hasOwnProperty(\"scope\")) {\n                    scopeNodes.push(node);\n                    return 4 /* c_noIn */;\n                }\n            });\n            return scopeNodes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Part;\n}(PartBase));\nvar ExtendsPart = (function (_super) {\n    __extends(ExtendsPart, _super);\n    function ExtendsPart(template, extPart, props, html, outerChildNodes, outerElement) {\n        _super.call(this, template, extPart, props, html, outerChildNodes, outerElement);\n        this.props = props;\n        this.isExtends = true;\n    }\n    ExtendsPart.prototype.to = function (part) {\n        /**剪切厡型链 */\n        var proto = part.$.__proto__;\n        this.$.__proto__ = proto;\n        part.$.__proto__ = this.$;\n        if (this.super) {\n            this.super.to(part);\n        }\n        push.apply(part.store, this.store);\n    };\n    return ExtendsPart;\n}(PartBase));\nvar PartTemplate = (function () {\n    function PartTemplate(name, sortPath, path, s, ext) {\n        this.name = name;\n        this.sortPath = sortPath;\n        this.path = path;\n        this.Instance = new ArrayEx();\n        this.isJSDefine = true;\n        this.parts = [];\n        this.partName = name.replace(/[\\.]/g, \"_\");\n        if (isObject(s)) {\n            var obj = s;\n            if (!isArray(obj.params)) {\n                this.params = new ArrayEx();\n            }\n            else {\n                this.params = obj.params;\n            }\n            if (!isArray(obj.datas)) {\n                this.datas = new ArrayEx();\n            }\n            else {\n                this.datas = obj.datas;\n            }\n            if (isObject(obj.extends)) {\n                this.extends = obj.extends;\n            }\n            if (isObject(obj.service)) {\n                if (!(obj.service instanceof Service)) {\n                    this.service = new Service(obj.service);\n                }\n                else {\n                    this.service = obj.service;\n                }\n            }\n            else {\n                this.service = new Service();\n            }\n        }\n        else {\n            this.params = new ArrayEx();\n            this.datas = new ArrayEx();\n            this.isJSDefine = false;\n            this.service = new Service();\n            if (ext) {\n                this.extends = ext;\n            }\n            var start_1 = 0, idx_1 = 0, str = s;\n            str.replace(memberRE, function (s0, name, s1, dft, s2, s3, limit, s4, s5, s6, filter, filterParam, index, sSource) {\n                var hasDefault;\n                if (s1 === \"!\") {\n                    if (s1 !== s3) {\n                        dft = limit;\n                        limit = \"\";\n                    }\n                    hasDefault = true;\n                }\n                else {\n                    hasDefault = false;\n                }\n                if (filterParam) {\n                    filterParam = filterParam.substring(1, filterParam.length - 1);\n                }\n                idx_1++;\n                this.params.push(new PartParam(name, hasDefault, filter, filterParam, dft, limit));\n                this.datas.push(sSource.substring(start_1, index));\n                start_1 = index + s0.length;\n                return '';\n            });\n            this.datas.push(str.substring(start_1, str.length));\n        }\n    }\n    /*调用render*/\n    PartTemplate.prototype.renderIn = function (elem, outerChildNodes, outerElement, props, part, partName, reExtends) {\n        var uiNode;\n        if (!isArray(outerChildNodes)) {\n            outerChildNodes = [];\n        }\n        if (!isArray(outerElement)) {\n            outerElement = [];\n        }\n        uiNode = $node('ui:render'); //document.createElement(\"ui:render\");\n        if (elem) {\n            elem.appendChild(uiNode);\n        }\n        return this.render(uiNode, elem, outerChildNodes, outerElement, props, part, partName, reExtends);\n    };\n    /*调用render*/\n    PartTemplate.prototype.renderBefore = function (elem, outerChildNodes, outerElement, props, part, partName, reExtends) {\n        var uiNode;\n        if (!isArray(outerChildNodes)) {\n            outerChildNodes = [];\n        }\n        if (!isArray(outerElement)) {\n            outerElement = [];\n        }\n        uiNode = $node('ui:render'); //document.createElement(\"ui:render\");\n        if (elem && elem.parentNode) {\n            elem.parentNode.insertBefore2(uiNode, elem);\n        }\n        return this.render(uiNode, elem, outerChildNodes, outerElement, props, part, partName, reExtends);\n    };\n    /**\n     * 渲染dom\n     */\n    PartTemplate.prototype.render = function (uiNode, that, outerChildNodes, outerElement, props, part, refPartName, reExtends) {\n        var ext, attrs, len, html;\n        if (!isObject(props)) {\n            props = {};\n        }\n        if (!uiNode) {\n            uiNode = $node('ui:render'); //document.createElement(\"ui:render\");\n        }\n        else {\n            setQuestionAtrr(uiNode, outerChildNodes, outerElement, part ? part.props : props, part);\n            attrs = uiNode.attributes;\n            len = attrs.length;\n            for (var i = 0; i < len; i++) {\n                var name_2 = attrs[0].name;\n                if (!props.hasOwnProperty(name_2)) {\n                    props[name_2] = attrs[0].value;\n                }\n                uiNode.removeAttributeNode(attrs[0]);\n            }\n        }\n        html = this.joinDatasByProps(props);\n        if (html === undefined) {\n            return;\n        }\n        if (reExtends) {\n            ext = getExtends(reExtends, this.sortPath);\n        }\n        if (!ext) {\n            ext = this.extends;\n        }\n        if (ext instanceof PartTemplate) {\n            ext = ext.beExtends(uiNode, that, outerChildNodes, outerElement, props, part);\n        }\n        var newPart = new Part(this, ext, props, html, outerChildNodes, outerElement);\n        if (refPartName) {\n            /**放置到全局引用 */\n            $t.parts.push(refPartName, newPart);\n        }\n        this.parts.push(newPart);\n        if (uiNode.parentNode !== null) {\n            //let p=uiNode.parentNode.__domNode__;\n            newPart.insertBefore(uiNode);\n            removeNode(uiNode);\n        }\n        return newPart;\n    };\n    /**由props构建html字符串\n     * @param {} props\n     * */\n    PartTemplate.prototype.joinDatasByProps = function (props) {\n        var err = [];\n        var d = slice.call(this.datas);\n        for (var i = 0; i < d.length - 1; i += 2) {\n            var v = void 0;\n            var p = this.params[i / 2];\n            if (props.hasOwnProperty(p.name)) {\n                if (p.limitValue) {\n                    v = p.limitValue;\n                }\n                else {\n                    v = props[p.name];\n                }\n            }\n            else if (p.hasDefault) {\n                v = p.defaultValue;\n            }\n            else {\n                err.push(this.name + '不可缺少' + p.name + '参数');\n                v = undefined;\n            }\n            if (p.filter && PartParamFilter.hasOwnProperty(p.filter)) {\n                v = PartParamFilter[p.filter](v, p.filterParam);\n            }\n            d.splice(i + 1, 0, v);\n        }\n        if (err.length > 0) {\n            if ($t.config.debugMode == 2) {\n                alert(err.join('\\n'));\n            }\n            log(err.join('\\n'));\n            bp();\n            return;\n        }\n        return d.join('');\n    };\n    /*变成别人的扩展*/\n    PartTemplate.prototype.beExtends = function (node, that, outerChildNodes, outerElement, props, part) {\n        var ext;\n        if (this.extends instanceof PartTemplate) {\n            ext = this.extends.beExtends(node, that, outerChildNodes, outerElement, props, part);\n        }\n        var html = this.joinDatasByProps(props);\n        return new ExtendsPart(this, ext, props, execTemplateScript(html, that, outerChildNodes, outerElement, props, part), outerChildNodes, outerElement);\n    };\n    PartTemplate.prototype.toDefineString = function () {\n        var s = '$this.ui.define(\"' + this.name + '\",\"' + this.sortPath + '\",\"' + this.path + '\",{datas:';\n        s += JSON.stringify(this.datas).replace(/<\\/script>/g, '</scr\"+\"ipt>');\n        s += ',params:[';\n        var params = [];\n        var ps = this.params;\n        for (var i = 0; i < ps.length; i++) {\n            var dft = JSON.stringify(ps[i].defaultValue);\n            var limitValue = JSON.stringify(ps[i].limitValue);\n            if (limitValue === undefined) {\n                limitValue = \"\";\n            }\n            else {\n                limitValue = ',' + limitValue;\n            }\n            if (dft === undefined) {\n                if (limitValue !== \"\") {\n                    dft = \",undefined\";\n                }\n                else {\n                    dft = \"\";\n                }\n            }\n            else {\n                dft = ',' + dft;\n            }\n            params.push('new $t.UIParam(\"' + ps[i].name + '\",' + ps[i].hasDefault + ',\"' + ps[i].filter + '\",\"' + ps[i].filterParam + '\"' + dft + limitValue + ')');\n        }\n        s += params.join(',');\n        s += '],service:' + this.service.toDefineString();\n        s += \"});\";\n        return s;\n    };\n    PartTemplate.prototype.parseParamsHelp = function (p) {\n        var params = this.params;\n        for (var i = 0; i < params.length; i++) {\n            var name_3 = params[i].name;\n            if (p.hasOwnProperty(name_3)) {\n                p[name_3] = p[name_3] || !params[i].hasDefault;\n            }\n            else {\n                p[name_3] = !params[i].hasDefault;\n            }\n        }\n        if (this.extends) {\n            this.extends.parseParamsHelp(p);\n        }\n    };\n    PartTemplate.prototype.getParamsHelp = function () {\n        var p = {};\n        this.parseParamsHelp(p);\n        var arr = [];\n        for (var i in p) {\n            arr.push({ name: i, necessary: p[i] });\n        }\n        return arr;\n    };\n    return PartTemplate;\n}());\nvar ITemplateList = (function () {\n    function ITemplateList() {\n    }\n    return ITemplateList;\n}());\nvar TemplateList = (function () {\n    function TemplateList() {\n        this.event = new $Event;\n    }\n    TemplateList.prototype.onDefine = function (name, fn) {\n        if (name.length === 0) {\n            return;\n        }\n        this.event.on('name', fn);\n        if (this.event.events.length > 1) {\n            this[name];\n        }\n    };\n    TemplateList.prototype.define = function (name, sortPath, path, s, ext) {\n        this[name] = new PartTemplate(name, sortPath, path, s, ext);\n        this.event.emit(name, this[name]);\n        return this[name];\n    };\n    TemplateList.prototype.toString = function () {\n        var lst = [];\n        for (var i in this) {\n            if (this.hasOwnProperty(i)) {\n                lst.push(i);\n            }\n        }\n        return lst.join('\\n');\n    };\n    return TemplateList;\n}());\nvar Service = (function (_super) {\n    __extends(Service, _super);\n    function Service(serv) {\n        _super.call(this);\n        this.__defineCallbacks__ = new ArrayEx();\n        if (isObject(serv)) {\n            for (var i in serv) {\n                this[i] = serv[i];\n                this.event.emit(i, this[i]);\n            }\n        }\n    }\n    Service.prototype.require = function (n) {\n        if (!this.hasOwnProperty(n)) {\n            this[n] = getService(n);\n        }\n        return this[n];\n    };\n    Service.prototype.define = function (name, s) {\n        try {\n            this[name] = exec(\"(\" + s + \")\");\n        }\n        catch (e) {\n            _catch(e);\n        }\n        this.event.emit(name, this[name]);\n    };\n    Service.prototype.toDefineString = function () {\n        var s = 'new $t.Service(';\n        var fns = [];\n        for (var i in this) {\n            if (this.hasOwnProperty(i)) {\n                fns.push('\"' + i + '\":' + this[i].toString());\n            }\n        }\n        if (fns.length > 0) {\n            s += '{' + fns.join(',') + '})';\n        }\n        else {\n            s += ')';\n        }\n        return s;\n    };\n    return Service;\n}(TemplateList));\n/// <reference path=\"core.ts\" />\nvar $rootScope;\nvar RootScope = (function () {\n    function RootScope() {\n        this.__actionNode__ = document.documentElement;\n        this.__children__ = [];\n        document['scope'] = this;\n    }\n    return RootScope;\n}());\nvar Scope = (function () {\n    function Scope(__commentNode__, parent, __name__) {\n        this.__commentNode__ = __commentNode__;\n        this.__name__ = __name__;\n        this.__children__ = [];\n        this.__actionNode__ = __commentNode__.parentNode;\n        this.__parent__ = parent;\n        this.__proto__ = parent;\n        __commentNode__.parentNode.__scope__ = this;\n        parent.__children__.push(this);\n        if (__name__) {\n            parent[__name__] = this;\n        }\n    }\n    return Scope;\n}());\nvar DOMScope = (function () {\n    function DOMScope() {\n        this.stack = [$rootScope];\n    }\n    /**\n     * 在dom节点上创建变量作用域对象\n     * @param {INode} node - dom节点\n     * @param {string} name - 名称\n     */\n    DOMScope.prototype.create = function (node, name) {\n        var scope = this.get(node);\n        if (node.parentNode !== scope.__actionNode__) {\n            scope = new Scope(node, scope, name);\n            this.stack.push(scope);\n        }\n        else {\n            throwError('当前层不允许重复定义scope:' + name);\n        }\n        return scope;\n    };\n    /**\n     * 获取变量作用域对象\n     * @param {INode} node - dom节点\n     */\n    DOMScope.prototype.get = function (node) {\n        if (!node) {\n            return $rootScope;\n        }\n        while (node != null) {\n            if (node.__scope__) {\n                return node.__scope__;\n            }\n            node = node.parentNode;\n        }\n        return $rootScope;\n    };\n    /**\n     * 切断dom节点和变量作用域对象的链接\n     * @param {Scope} scopeVarObject - 变量作用域对象\n     */\n    DOMScope.prototype.unlink = function (scope) {\n        var p = scope.__parent__;\n        scope.__parent__ = null;\n        removeItem(p.__children__, scope);\n        delete p[scope.__name__];\n    };\n    /**\n     * 链接dom节点和变量作用域对象\n     * @param {Scope} scopeVarObject - 变量作用域对象\n     * @param {INode} node - dom节点\n     */\n    DOMScope.prototype.link = function (scope, node) {\n        var p = $t.domScope.get(node);\n        if (!p) {\n            return;\n        }\n        scope.__parent__ = p;\n        p.__children__.push(scope);\n        if (scope.__name__) {\n            p[scope.__name__] = scope;\n        }\n    };\n    return DOMScope;\n}());\nvar $client;\nvar Client = (function () {\n    function Client() {\n        this.data = {};\n        this.isListen = false;\n        this.events = [];\n        this.setSizeProperty('onResize', function () {\n            return {\n                width: document.documentElement.clientWidth,\n                height: document.documentElement.clientHeight\n            };\n        });\n        this.setSizeProperty('width', function () {\n            return document.documentElement.clientWidth;\n        });\n        this.setSizeProperty('height', function () {\n            return document.documentElement.clientHeight;\n        });\n        this.setSizeProperty('left', function () {\n            return document.documentElement.clientLeft;\n        });\n        this.setSizeProperty('top', function () {\n            return document.documentElement.clientTop;\n        });\n        this.setSizeProperty('right', function () {\n            return document.documentElement.clientLeft + document.documentElement.clientWidth;\n        });\n        this.setSizeProperty('bottom', function () {\n            return document.documentElement.clientTop + document.documentElement.clientHeight;\n        });\n    }\n    Client.prototype.emit = function () {\n        for (var i = 0; i < this.events.length; i++) {\n            this.events[i]();\n        }\n    };\n    Client.prototype.setSizeProperty = function (name, fn) {\n        this.data[name] = undefined;\n        this[name] = function (v) {\n            /*此属性用于被绑定*/\n            if (this.data[name] === undefined && this.__bind__) {\n                if (this.isListen === false) {\n                    this.isListen = true;\n                    window.addEventListener('resize', this.emit);\n                }\n                var bind = this.__bind__;\n                var getV = function () {\n                    this[name] = fn();\n                };\n                this.data[name] = fn();\n                this.events.push(getV);\n            }\n            if (v) {\n                this.data[name] = v;\n            }\n            return this.data[name];\n        };\n    };\n    return Client;\n}());\n$client = new Client;\n/// <reference path='core.ts'/>\n/// <reference path='./part/Template.ts'/>\n/// <reference path='scope.ts'/>\n/// <reference path='Client.ts'/>\nvar readyRE = /complete|loaded|interactive/;\nfunction renderTemplate(tp) {\n    var sHTML = getTemplate(tp);\n    var vDOM = $DOM(sHTML);\n    initHTML(vDOM.childNodes);\n    if (isFunction(vDOM)) {\n        var p = tp.parentNode;\n        replaceNodeByNodes(tp, takeChildNodes(vDOM.toDOM()));\n        vDOM.__domNode__ = p;\n        return;\n    }\n    replaceNodeByNodes(tp, takeChildNodes(vDOM.toDOM()));\n    //vDOM.innerHTML='';\n}\nvar Config = (function () {\n    function Config() {\n        this.baseUIPath = baseUIPath;\n        this.baseServicePath = 'service';\n        this.debugMode = 2;\n    }\n    return Config;\n}());\nvar Store = (function (_super) {\n    __extends(Store, _super);\n    function Store() {\n        _super.apply(this, arguments);\n    }\n    Store.prototype.take = function (name) {\n        if (this.hasOwnProperty(name)) {\n            var ret = this[name];\n            delete this[name];\n            if (ret.childNodes.length > 1) {\n                return ret.childNodes;\n            }\n            else {\n                return ret.childNodes[0];\n            }\n        }\n        return null;\n    };\n    Store.prototype.takeElem = function (name) {\n        if (this.hasOwnProperty(name)) {\n            var ret = this[name];\n            delete this[name];\n            if (ret.children.length > 1) {\n                return ret.children;\n            }\n            else {\n                return ret.children[0];\n            }\n        }\n        return null;\n    };\n    return Store;\n}(HashObject));\nfunction getQueryString(name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n    var r = location.search.substr(1).match(reg);\n    if (r != null) {\n        return unescape(r[2]);\n    }\n    return null;\n}\nvar getNameByURL = (function () {\n    var RE1 = /[a-zA-Z\\d\\._]+\\.[a-zA-Z\\d]+$/;\n    var RE2 = /\\.[a-zA-Z\\d]+$/;\n    return function (url) {\n        return url.match(RE1)[0].replace(RE2, '');\n    };\n}());\nvar getFileNameByURL = (function () {\n    var RE1 = /[a-zA-Z\\d\\._]+\\.[a-zA-Z\\d]+$/;\n    return function (url) {\n        return url.match(RE1)[0];\n    };\n}());\nfunction appendQueryString(name, value) {\n    if (location.search) {\n        return location.href + '&' + name + '=' + value;\n    }\n    else {\n        return location.href + '?' + name + '=' + value;\n    }\n}\nvar Turtle = (function () {\n    function Turtle() {\n        var _this = this;\n        this.domScope = new DOMScope;\n        this.rootScope = new RootScope;\n        this.config = new Config;\n        this.replaceClassStore = [];\n        this.T = new TemplateList;\n        this.parts = newKeyArrayObject('Parts');\n        this.xhr = new XHR;\n        this.service = new Service;\n        this.store = new Store;\n        this.refs = newKeyArrayObject(\"RefElements\");\n        this.fn = {};\n        this.readyByRenderDocument = new ReadyObject;\n        this.renderDocument = function () {\n            _this.renderDocument.beginTime = new Date();\n            var xmps = findTemplates(document.body.children), i, templateXMP = [];\n            /*优先处理定义相关的模板*/\n            for (i = 0; i < xmps.length; i++) {\n                if (isDefine(xmps[i])) {\n                    parseDefine(xmps[i]);\n                }\n                else {\n                    templateXMP.push(xmps[i]);\n                }\n            }\n            /*处理逻辑模板*/\n            for (i = 0; i < templateXMP.length; i++) {\n                renderTemplate(templateXMP[i]);\n            }\n            replaceCls();\n            /*initLink();*/\n            _this.renderDocument.endTime = new Date();\n        };\n        rte.on(\"error\", function (e) { log(e); bp(); alert(e); });\n        var scriptNode = this.turtleScriptElement = document.scripts[document.scripts.length - 1], compile = getAttr(scriptNode, 'compile', null), load = getAttr(scriptNode, 'load', null), script = scriptNode.innerHTML, baseuipath = getAttr(scriptNode, 'baseuipath', null), isExtend = getAttr(scriptNode, 'extend', null), compilename = getAttr(scriptNode, 'compilename', null), compileuilist = getAttr(scriptNode, 'compileuilist', null), compileInfo;\n        //初始化组件配置\n        if (baseuipath) {\n            baseUIPath.push(baseuipath.split(\";\"));\n        }\n        else {\n            baseUIPath.push('{path:\"ui\",name:\"ui\"}');\n        }\n        if (isExtend) {\n            extend(window, this.fn);\n        }\n        //初始化预编译输出路径\n        this.url = scriptNode.getAttribute(\"src\");\n        if (compile !== null) {\n            if (getQueryString(\"turtle_nocompile\") != \"1\") {\n                this.xhr.get(scriptNode.src + '.setup', false, function (text) {\n                    try {\n                        exec('compileInfo=' + text);\n                    }\n                    catch (e) {\n                        _catch(e);\n                    }\n                });\n            }\n            this.isCompile = true;\n        }\n        //预加载依赖项\n        if (load) {\n            var loads_1 = load.split(\",\");\n            var i_1 = 0;\n            var fnLoad_1 = function () {\n                i_1++;\n                if (i_1 < loads_1.length) {\n                    includeJSFiles(loads_1[i_1], fnLoad_1);\n                }\n                else {\n                    if (compileInfo && compileInfo.isOn && compileInfo.url) {\n                        _this.r1(scriptNode, compileuilist, compilename, compileInfo, compile);\n                    }\n                    else {\n                        _this.r2();\n                    }\n                }\n            };\n            includeJSFiles(loads_1[0], fnLoad_1);\n        }\n        else {\n            if (compileInfo && compileInfo.isOn && compileInfo.url) {\n                this.r1(scriptNode, compileuilist, compilename, compileInfo, compile);\n            }\n            else {\n                this.r2();\n            }\n        }\n        if (script.length > 0) {\n            execScript(scriptNode);\n        }\n    }\n    Object.defineProperty(Turtle.prototype, \"rootParts\", {\n        get: function () {\n            var t = getParts(document.body.childNodes);\n            Object.defineProperty(t, \"treeDiagram\", {\n                get: function () {\n                    var tabSpace = 0;\n                    var s = \"\";\n                    for (var i = 0; i < t.length; i++) {\n                        s += t[i].treeDiagram(tabSpace + 2);\n                    }\n                    return s;\n                }\n            });\n            return t;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Turtle.prototype.emitResize = function () {\n        var parts = this.rootParts;\n        for (var i = 0; i < parts.length; i++) {\n            parts[i].emitResize();\n        }\n    };\n    Turtle.prototype.r1 = function (scriptNode, compileuilist, compilename, compileInfo, compile) {\n        this.ready(function () {\n            this.compileDocument(scriptNode, compileuilist, function (html, compileJS, importScripts) {\n                if (!compilename) {\n                    compilename = getNameByURL(getFileNameByURL(location.href));\n                    if (/\\./.test(compilename)) {\n                        compilename = compilename.split('.')[0];\n                    }\n                    console.log('未提供compilename，自动设置为“' + compilename + '”');\n                }\n                var url = compileInfo.url + \"?htmlName=\" + compilename;\n                var b = document.body;\n                b.innerHTML = '<div style=\"background-color:#fff;position:absolute;left:0;right:0;bottom:0;top:0;\">开始编译页面</div>';\n                var c = b.children[0];\n                switch (compile) {\n                    case 'onlyBody':\n                        html = '<xmp><script>' + importScripts + '</script></xmp>' + html.match(/(<body[\\s\\S]*?>)([\\s\\S]*?)(<\\/body>)/)[2];\n                        break;\n                }\n                this.xhr.post(url, html, false, function (text) {\n                    var br = document.createElement('br');\n                    var sec = document.createElement('span');\n                    var timeout = 1000;\n                    sec.innerHTML = \"?\";\n                    sec.style.color = \"#f00\";\n                    c.appendChild(br);\n                    c.appendChild(br.cloneNode());\n                    c.appendChild(document.createTextNode('刷新页面剩余时间：'));\n                    c.appendChild(sec);\n                    c.appendChild(br.cloneNode());\n                    c.appendChild(br.cloneNode());\n                    c.appendChild(document.createTextNode(text));\n                    for (var i = 0; i < compileJS.length; i++) {\n                        var url_1 = compileInfo.url + \"?uiName=\" + compileJS[i].name + \"&uiPath=\" + compileJS[i].path;\n                        this.xhr.post(url_1, compileJS[i].script, false, function (text) {\n                            c.appendChild(br.cloneNode());\n                            c.appendChild(document.createTextNode(text));\n                        });\n                    }\n                    setTimeout(function () {\n                        window.location.href = appendQueryString(\"turtle_nocompile\", \"1\");\n                    }, timeout);\n                    setInterval(function () {\n                        timeout = timeout - 100;\n                        sec.innerHTML = '' + timeout / 1000;\n                    }, 100);\n                });\n            });\n        });\n    };\n    Turtle.prototype.r2 = function () {\n        var _this = this;\n        this.ready(function () {\n            _this.renderDocument();\n            _this.readyByRenderDocument.isReady = true;\n            _this.emitResize();\n        });\n    };\n    Turtle.prototype.ready = function (fn) {\n        var _this = this;\n        if (this.readyByRenderDocument.isReady || (readyRE.test(document.readyState) && document.body !== null)) {\n            fn();\n        }\n        else {\n            var onLoaded_1 = function () {\n                if (document.body !== null) {\n                    window.removeEventListener('DOMContentLoaded', onLoaded_1);\n                    clearInterval(tid);\n                    fn();\n                }\n            };\n            var tid = setInterval(function () {\n                if (_this.readyByRenderDocument.isReady || (readyRE.test(document.readyState) && document.body !== null)) {\n                    clearInterval(tid);\n                    window.removeEventListener('DOMContentLoaded', onLoaded_1);\n                    fn();\n                }\n            }, 10);\n            window.addEventListener('DOMContentLoaded', onLoaded_1, false);\n        }\n        return this;\n    };\n    return Turtle;\n}());\n/// <reference path='turtle.ts'/>\n/// <reference path='plugin/index.ts'/>\nif (!$DOM) {\n    $DOM = function (html) {\n        var elem = document.createElement('ui:dom');\n        elem.innerHTML = html;\n        return elem;\n    };\n    $node = function (name, nodeType) {\n        switch (nodeType) {\n            case 3:\n                return document.createTextNode(name);\n            case 8:\n                return document.createComment(name);\n            case 1:\n            case undefined:\n                return document.createElement(name);\n            case 10:\n                return null;\n            default:\n                return null;\n        }\n    };\n}\nvar turtle = $t = new Turtle();\n"],"file":"js/turtle.js","sourceRoot":"/source/"}